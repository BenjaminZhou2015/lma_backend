{"version":3,"sources":["components/Box.js","components/List.js","components/Machine.js","components/User.js","components/Location.js","constants.js","components/TopBar.js","components/Login.js","components/Home.js","components/Main.js","App.js","index.js"],"names":["style","background","padding","Box","data","this","props","res","index","map","dat","item","checkres","locationID","push","length","ele","orientation","color","fontWeight","fontSize","height","justifyContent","alignItems","element","gutter","sort","a","b","machineType","sn","className","span","backgroundColor","isAvailable","width","margin","display","getRow","Component","List","availableMachines","title","Item","label","Option","Select","EditableCell","editing","dataIndex","inputType","children","record","restProps","inputNode","name","rules","required","message","handleChange","value","console","log","Machine","formRef","React","createRef","edit","machine","state","current","setFieldsValue","userID","userReservedID","scanString","setState","editingKey","_id","isEditing","cancel","save","key","validateFields","row","newData","dataSource","findIndex","splice","handleAdd","handleSave","fetch","headers","method","body","JSON","stringify","then","response","json","isSuccess","catch","err","handleDelete","count","filter","onAdd","id","columns","editable","render","_","defaultValue","onChange","text","onConfirm","onClick","marginRight","disabled","mergedColumns","col","onCell","type","marginTop","marginBottom","ref","component","components","cell","bordered","rowKey","rowClassName","pagination","User","user","Location","email","defaultRunningTime","defaultReservationExpireTime","defaultPickupTime","location","API_ROOT","TopBar","isLoggedIn","handleLogout","NormalLoginForm","handleSubmit","e","preventDefault","form","values","username","password","ok","Error","handleLoginSucceed","token","success","error","getFieldDecorator","onSubmit","prefix","placeholder","htmlType","Login","Form","create","Home","handleClick","selectedKeys","mode","icon","AppstoreOutlined","componentsSwitch","Main","getLogin","Redirect","to","getMachine","Switch","Route","path","App","Boolean","localStorage","getItem","setItem","removeItem","getMachineFromDb","machines","getUserFromDb","users","getLocationFromDb","locations","putDataToDB","deleteFromDB","idTodelete","updateDB","idToUpdate","updateToApply","ReactDOM","BrowserRouter","document","getElementById"],"mappings":"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","file":"static/js/main.da692c24.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Row, Col, Divider } from 'antd';\nimport '../index.css';\nimport 'antd/dist/antd.css';\n\nconst style = { background: '#0092ff', padding: '8px 0' };\n\n\n\nclass Box extends Component{\n\n    render() {\n        const { data } = this.props;\n        let res =[];\n        let index =[];\n        var checkres = (item)=>{\n            for(const ele of res){\n                if(item === ele){\n                    return true;\n                }\n            }\n            return false;\n        }\n        data.map((dat) => {\n                if(!checkres(dat.locationID)) {\n                    res.push(dat.locationID);\n                    index.push(res.length-1);\n                }\n                return null;\n            }\n        )\n        const getRow=(data, element)=>{\n            return <Row gutter={[16, 24]}>\n                {data.length <= 0\n                    ? 'NO DB ENTRIES YET'\n                    : data.sort((a,b)=>a.machineType===b.machineType?a.sn < b.sn?-1:1:a.machineType===\"washer\"?-1:1).map((dat) => (\n                        dat.locationID == res[element]?\n                            <Col className=\"gutter-row\" span={6}>\n                                <div style={\n                                    {...style,\n                                        backgroundColor:dat.isAvailable?'#98FB98':'#87CEFA',\n                                        color:'black',\n\n                                        width:300,\n                                        height:100,\n                                        margin:10,\n\n                                        display: 'flex',\n                                        justifyContent: 'center',\n                                        alignItems: 'center',\n\n                                        fontSize:20\n\n                                    }}> {dat.machineType+\" \"+dat.sn} </div>\n                            </Col>:null\n\n                    ))}\n\n\n            </Row>\n        }\n\n\n        return (\n            <>\n\n                <div>\n                    {index.map((ele)=>(\n                        <div>\n                            <Divider orientation=\"middle\" style={{ color: '#333', fontWeight: 'normal',fontSize:30, height:50,justifyContent: 'center', alignItems: 'center'}}>\n                                {\"location:\"+ele}\n                            </Divider>\n                            {getRow(data,ele)}\n                        </div>\n                    ))}\n                </div>\n            </>\n        );\n\n    }\n\n}\nexport default Box;","import React, { Component } from 'react';\nimport 'antd/dist/antd.css';\nimport { Descriptions} from 'antd';\n\n\n\nclass List extends Component{\n\n\n    render() {\n        const { data } = this.props;\n        let availableMachines = 0;\n        data.map((dat) => {\n            if(dat.isAvailable) {\n                availableMachines += 1;\n            }\n            return null;\n            }\n        )\n\n        return (\n                <>\n                    <Descriptions title=\"Statistics\">\n                        <Descriptions.Item label=\"Washer & Dryer\">{data.length}</Descriptions.Item>\n                        <Descriptions.Item label=\"Available Machines\">{availableMachines}</Descriptions.Item>\n                    </Descriptions>,\n\n\n\n\n                </>\n\n            )\n\n\n    }\n\n}\nexport default List;","import React, {useState,Component} from 'react';\nimport Box from './Box';\nimport List from './List';\nimport {Input, InputNumber, Menu,Select} from \"antd\";\nimport { Table,  Button, Popconfirm} from 'antd';\nimport {Form} from 'antd4'\n\nconst { Option } = Select;\nconst EditableCell = ({\n                          editing,\n                          dataIndex,\n                          title,\n                          inputType,\n                          record,\n                          index,\n                          children,\n                          ...restProps\n                      }) => {\n    const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\n    return (\n        <td {...restProps}>\n            {editing ? (\n                <Form.Item\n                    name={dataIndex}\n                    style={{\n                        margin: 0,\n                    }}\n                    rules={[\n                        {\n                            required: true,\n                            message: `Please Input ${title}!`,\n                        },\n                    ]}\n                >\n                    {inputNode}\n                </Form.Item>\n            ) : (\n                children\n            )}\n        </td>\n    );\n};\n/*sn: {\n    type: String,\n        required: true\n},\nisAvailable: Boolean,\n    isReserved: {\n    type: Boolean,\ndefault: false\n},\n//for machine which is not picked up by user who use it\n//related function:updateNonPickupMachineStatus\nisPickedUp: {\n    type: Boolean,\ndefault: true\n},\nmachineType: String, // washer, dryer\n    startTime: {\n    type: Date,\ndefault: Date.UTC(1970, 0, 1)\n},\nuserID: String,\n    userReservedID: String,\n    locationID: String,\n    scanString: String  //base64(id)*/\n\nfunction handleChange(value) {\n    console.log(`selected ${value}`);\n}\n\nclass Machine extends Component {\n\n    formRef = React.createRef();\n    constructor(props) {\n        super(props);\n        this.state= {\n            dataSource : this.props.data,\n            count: this.props.data.length,\n            editingKey: '',\n            machine:''\n\n        };\n        const formRef = React.createRef();\n\n        this.columns = [\n            {\n                title: 'SN',\n                dataIndex: 'sn',\n                key: 'sn',\n                editable: true,\n\n            },\n            {\n                title: 'IsAvailable',\n                dataIndex: 'isAvailable',\n                key: 'isAvailable',\n                editable: true,\n\n            },\n            {\n                title: 'MachineType',\n                dataIndex: 'machineType',\n                key: 'machineType',\n                editable: true,\n                render: (_, record) => {\n\n                    /*const editable = this.isEditing(record);\n                    return editable ? (\n                        <span>\n                        <a\n                            onClick={() => this.save(record._id)}\n                            style={{\n                                marginRight: 8,\n                            }}\n                        >\n                          Save\n                        </a>\n                        <Popconfirm title=\"Sure to cancel?\" onConfirm={this.cancel}>\n                          <a>Cancel</a>\n                        </Popconfirm>\n                        </span>\n                    ) : (\n                        <a disabled={this.state.editingKey !== ''} onClick={() => this.edit(record)}>\n                            Edit\n                        </a>\n                    );*/\n                    const editable = this.isEditing(record);\n                    const {machine} = this.state;\n                    return editable ?\n                        (<Select defaultValue={record.machineType} style={{width: 120}}\n                                 onChange={(value, record)=>{\n                                     record.machineType =value;\n                                     this.setState({\n                                         machine : value\n                                     })\n                                 }}>\n                            <Option value=\"washer\" >washer</Option>\n                            <Option value=\"lucy\" >dryer</Option>\n                        </Select>):\n                        (<Select defaultValue={record.machineType} style={{width: 120}} onChange={handleChange}>\n\n                        </Select>)\n\n                },\n\n            },\n            {\n                title: 'LocationID',\n                dataIndex: 'locationID',\n                key: 'locationID',\n                editable: true,\n            },\n            {\n                title: 'UserID',\n                dataIndex: 'userID',\n                key: 'userID',\n                editable: true,\n            },\n            {\n                title: 'UserReservedID',\n                dataIndex: 'userReservedID',\n                key: 'userReservedID',\n                editable: true,\n            },\n            {\n                title: 'ScanString',\n                dataIndex: 'scanString',\n                key: 'scanString',\n                editable: true,\n            },\n            {\n                title: \"\",\n                key: \"delete\",\n                render: (text, record) => (\n                    this.state.dataSource.length >= 1 ? (\n                        <Popconfirm title=\"Sure to delete?\" onConfirm={() => this.handleDelete(record._id)}>\n                            <a>Delete</a>\n                        </Popconfirm>\n                    ) : null\n\n                ),\n            },\n            {\n                title: \"\",\n                key: \"edit\",\n                render: (_, record) => {\n                    const editable = this.isEditing(record);\n                    return editable ? (\n                        <span>\n                    <a\n                        onClick={() => this.save(record._id)}\n                        style={{\n                            marginRight: 8,\n                        }}\n                    >\n                      Save\n                    </a>\n                    <Popconfirm title=\"Sure to cancel?\" onConfirm={this.cancel}>\n                      <a>Cancel</a>\n                    </Popconfirm>\n                    </span>\n                    ) : (\n                        <a disabled={this.state.editingKey !== ''} onClick={() => this.edit(record)}>\n                            Edit\n                        </a>\n                    );\n                },\n            },\n\n        ];\n    }\n    edit = record => {\n        const {machine} = this.state;\n        this.formRef.current.setFieldsValue({\n            sn: '',\n            isAvailable: '',\n            machineType: machine,\n            locationID: '',\n            userID:'',\n            userReservedID:'',\n            scanString:'',\n            ...record,\n        });\n\n        this.setState({\n            editingKey: record._id\n        });\n\n        //record._id = id; //Cannot be recovered\n    };\n\n    isEditing = (record) => {\n        return record._id === this.state.editingKey;\n    };\n\n\n    cancel = () => {\n        this.setState({\n            editingKey : ''\n        });\n    };\n\n    save = async key => {\n        try {\n            const row = await this.formRef.current.validateFields();\n            const newData = [...this.state.dataSource];\n            const index = newData.findIndex(item =>  item._id === key);\n\n            if (index > -1) {\n                const item = newData[index];\n                newData.splice(index, 1, { ...item, ...row });\n\n                if(key === \"VirtualID\"){\n                    this.handleAdd(newData[index]);\n                } else{\n                    this.handleSave(newData[index]);\n                }\n                this.setState({\n                    dataSource : newData,\n                    editingKey: ''\n                });\n            } else {\n                this.setState({\n                    dataSource : newData,\n                    editingKey: ''\n                });\n\n            }\n        } catch (errInfo) {\n            console.log('Validate Failed:', errInfo);\n        }\n    };\n\n    handleSave = item => {\n        const {dataSource} = this.state;\n        fetch(`http://lmapp.us-east-2.elasticbeanstalk.com/api/machines/${item._id}`, {\n            headers:{\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            method: 'PUT',\n            body: JSON.stringify({\n                sn: item.sn,\n                isAvailable: item.isAvailable,\n                machineType: item.machineType,\n                locationID:item.locationID,\n                userID:item.userID,\n                userReservedID:item.userReservedID,\n                scanString:item.scanString,\n            }),\n        })\n            .then((response) => {\n                return response.json();\n                //throw new Error(response.msg);\n            })\n            .then((res) => {\n                return (res.isSuccess)\n            })\n            .catch((err) => console.log(err))\n    };\n\n    handleDelete = _id => {\n        const {count, dataSource} = this.state;\n        // this.setState({\n        //     dataSource: dataSource.filter(item => item._id !== _id),\n        // });\n\n        fetch(`http://lmapp.us-east-2.elasticbeanstalk.com/api/machines/${_id}`, {\n            headers:{\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            method: 'DELETE',\n        })\n            .then((response) => {\n                return response.json();\n                //throw new Error(response.msg);\n            })\n            .then(() => {\n                return this.setState({\n                    dataSource: dataSource.filter(item => item._id !== _id),\n                    count: count - 1,\n                });\n            })\n            .catch((err) => console.log(err))\n    };\n\n    onAdd = () => {\n        const {count, dataSource} = this.state;\n\n        const newData = {\n            sn: '',\n            isAvailable: '',\n            machineType: '',\n            locationID: '',\n            userID:'',\n            userReservedID:'',\n            scanString:'',\n            _id : \"VirtualID\"\n        };\n\n        this.setState({\n            dataSource:[...dataSource, newData],\n            count: count + 1,\n        });\n        this.edit(newData)\n    };\n\n    handleAdd = (newData) => {\n        fetch(\"http://lmapp.us-east-2.elasticbeanstalk.com/api/machines\", {\n            headers:{\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            method: 'POST',\n            body: JSON.stringify({\n                sn: newData.sn,\n                isAvailable: newData.isAvailable,\n                machineType: newData.machineType,\n                locationID: newData.locationID,\n                userID:newData.userID,\n                userReservedID:newData.userReservedID,\n                scanString:newData.scanString,\n            }),\n        })\n            .then((response) => {\n                //console.log(response.text());\n                return response.json();\n                //throw new Error(response.msg);\n            })\n            .then((res) => {\n                if(res.isSuccess)\n                    newData._id = res.id\n                return res.isSuccess\n            })\n            .catch((err) => console.log(err))\n    }\n\n\n\n\n    render() {\n        const { data } = this.props;\n        const { dataSource } = this.state;\n\n        const mergedColumns = this.columns.map(col => {\n            if (!col.editable) {\n                return col;\n            }\n            return {\n                ...col,\n                onCell: record => ({\n                    record,\n                    inputType: 'text',\n                    dataIndex: col.dataIndex,\n                    title: col.title,\n                    editing: this.isEditing(record),\n                }),\n            };\n        });\n        return (\n            <>\n                <div>\n                    <Button disabled={this.state.editingKey !== ''} onClick={this.onAdd}\n                            type=\"primary\"\n                            style={{\n                                marginTop:16,\n                                marginBottom: 16\n                            }}>\n                        Add a New Location\n                    </Button>\n                    <Form ref={this.formRef} component={false}>\n                        <Table\n                            components={{\n                                body: {\n                                    cell: EditableCell,\n                                },\n                            }}\n                            bordered\n                            rowKey = \"_id\"\n                            dataSource={dataSource}\n                            columns={mergedColumns}\n                            rowClassName=\"editable-row\"\n                            pagination={{\n                                onChange: this.cancel,\n                            }}\n                        />\n                    </Form>\n                </div>\n                <List data={data}/>\n                <Box data={data}/>\n            </>\n        );\n    }\n}\n\nexport default Machine;","import React, {Component} from 'react';\nimport 'antd/dist/antd.css';\nimport { Table, Tag, Space } from 'antd';\n\n\nclass User extends Component {\n\n\n\n    render() {\n        const { user } = this.props;\n        const columns = [\n            {\n                title: 'RegisterDate',\n                dataIndex: 'registerDate',\n                key: 'date',\n                render: text => <a>{text}</a>,\n            },\n            {\n                title: 'FirstName',\n                dataIndex: 'firstName',\n                key: 'firstName',\n            },\n            {\n                title: 'LastName',\n                dataIndex: 'lastName',\n                key: 'lastName',\n            },\n\n            {\n                title: 'Email',\n                dataIndex: 'email',\n                key: 'email',\n            },\n            {\n                title: 'LocationID',\n                dataIndex: 'locationID',\n                key: 'locationID',\n            },\n\n        ];\n\n        return (\n            <>\n\n                <Table columns={columns} dataSource={user} />\n\n\n            </>\n        );\n    }\n}\n\nexport default User;","import React, {useState, Component} from 'react';\nimport 'antd/dist/antd.css';\nimport { Table,  Button, Popconfirm, Input, InputNumber} from 'antd';\nimport {Form} from 'antd4'\n\nconst EditableCell = ({\n                          editing,\n                          dataIndex,\n                          title,\n                          inputType,\n                          record,\n                          index,\n                          children,\n                          ...restProps\n                      }) => {\n    const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\n    return (\n        <td {...restProps}>\n            {editing ? (\n                <Form.Item\n                    name={dataIndex}\n                    style={{\n                        margin: 0,\n                    }}\n                    rules={[\n                        {\n                            required: true,\n                            message: `Please Input ${title}!`,\n                        },\n                    ]}\n                >\n                    {inputNode}\n                </Form.Item>\n            ) : (\n                children\n            )}\n        </td>\n    );\n};\n\nclass Location extends Component {\n    formRef = React.createRef();\n    constructor(props) {\n        super(props);\n        this.state= {\n            dataSource : this.props.location,\n            count: this.props.location.length,\n            editingKey: ''\n        };\n        const formRef = React.createRef();\n\n        this.columns = [\n            {\n                title: 'Name',\n                dataIndex: 'name',\n                key: 'name',\n                editable: true,\n\n            },\n            {\n                title: 'Email',\n                dataIndex: 'email',\n                key: 'email',\n                editable: true,\n\n            },\n            {\n                title: 'DefaultRunningTime',\n                dataIndex: 'defaultRunningTime',\n                key: 'defaultRunningTime',\n                editable: true,\n\n\n            },\n            {\n                title: 'DefaultReservationExpireTime',\n                dataIndex: 'defaultReservationExpireTime',\n                key: 'defaultReservationExpireTime',\n                editable: true,\n            },\n            {\n                title: 'DefaultPickupTime',\n                dataIndex: 'defaultPickupTime',\n                key: 'defaultPickupTime',\n                editable: true,\n\n            },\n            {\n                title: \"\",\n                key: \"delete\",\n                render: (text, record) => (\n                    this.state.dataSource.length >= 1 ? (\n                        <Popconfirm title=\"Sure to delete?\" onConfirm={() => this.handleDelete(record._id)}>\n                            <a>Delete</a>\n                        </Popconfirm>\n                    ) : null\n\n                ),\n            },\n            {\n                title: \"\",\n                key: \"edit\",\n                render: (_, record) => {\n                    const editable = this.isEditing(record);\n                    return editable ? (\n                        <span>\n                    <a\n                        onClick={() => this.save(record._id)}\n                        style={{\n                            marginRight: 8,\n                        }}\n                    >\n                      Save\n                    </a>\n                    <Popconfirm title=\"Sure to cancel?\" onConfirm={this.cancel}>\n                      <a>Cancel</a>\n                    </Popconfirm>\n                    </span>\n                    ) : (\n                        <a disabled={this.state.editingKey !== ''} onClick={() => this.edit(record)}>\n                            Edit\n                        </a>\n                    );\n                },\n            },\n\n        ];\n    }\n\n    edit = record => {\n        this.formRef.current.setFieldsValue({\n            name: '',\n            email: '',\n            defaultRunningTime: '',\n            defaultReservationExpireTime: '',\n            defaultPickupTime: '',\n            ...record,\n        });\n\n        this.setState({\n            editingKey: record._id\n        });\n\n        //record._id = id; //Cannot be recovered\n    };\n\n    isEditing = (record) => {\n        return record._id === this.state.editingKey;\n    };\n\n\n    cancel = () => {\n        this.setState({\n            editingKey : ''\n        });\n    };\n\n    save = async key => {\n        try {\n            const row = await this.formRef.current.validateFields();\n            const newData = [...this.state.dataSource];\n            const index = newData.findIndex(item =>  item._id === key);\n\n            if (index > -1) {\n                const item = newData[index];\n                newData.splice(index, 1, { ...item, ...row });\n\n                if(key === \"VirtualID\"){\n                    this.handleAdd(newData[index]);\n                } else{\n                    this.handleSave(newData[index]);\n                }\n                this.setState({\n                    dataSource : newData,\n                    editingKey: ''\n                });\n            } else {\n                this.setState({\n                    dataSource : newData,\n                    editingKey: ''\n                });\n\n            }\n        } catch (errInfo) {\n            console.log('Validate Failed:', errInfo);\n        }\n    };\n\n    handleSave = item => {\n        const {dataSource} = this.state;\n        fetch(`http://lmapp.us-east-2.elasticbeanstalk.com/api/locations/${item._id}`, {\n            headers:{\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            method: 'PUT',\n            body: JSON.stringify({\n                name: item.name,\n                email: item.email,\n                defaultRunningTime: item.defaultRunningTime,\n                defaultReservationExpireTime: item.defaultReservationExpireTime,\n                defaultPickupTime: item.defaultPickupTime,\n            }),\n        })\n            .then((response) => {\n                return response.json();\n                //throw new Error(response.msg);\n            })\n            .then((res) => {\n                return (res.isSuccess)\n            })\n            .catch((err) => console.log(err))\n    };\n\n    handleDelete = _id => {\n        const {count, dataSource} = this.state;\n        // this.setState({\n        //     dataSource: dataSource.filter(item => item._id !== _id),\n        // });\n\n        fetch(`http://lmapp.us-east-2.elasticbeanstalk.com/api/locations/${_id}`, {\n            headers:{\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            method: 'DELETE',\n        })\n            .then((response) => {\n                return response.json();\n                //throw new Error(response.msg);\n            })\n            .then(() => {\n                return this.setState({\n                    dataSource: dataSource.filter(item => item._id !== _id),\n                    count: count - 1,\n                });\n            })\n            .catch((err) => console.log(err))\n    };\n\n    onAdd = () => {\n        const {count, dataSource} = this.state;\n\n        const newData = {\n            name:\"\",\n            email:\"\",\n            defaultRunningTime: \"\",\n            defaultReservationExpireTime: \"\",\n            defaultPickupTime: \"\",\n            _id : \"VirtualID\"\n        };\n\n        this.setState({\n            dataSource:[...dataSource, newData],\n            count: count + 1,\n        });\n        this.edit(newData)\n    };\n\n    handleAdd = (newData) => {\n        fetch(\"http://lmapp.us-east-2.elasticbeanstalk.com/api/locations\", {\n            headers:{\n                'Accept': 'application/json',\n                'Content-Type': 'application/json'\n            },\n            method: 'POST',\n            body: JSON.stringify({\n                name: newData.name,\n                email: newData.email,\n                defaultRunningTime: newData.defaultRunningTime,\n                defaultReservationExpireTime: newData.defaultReservationExpireTime,\n                defaultPickupTime: newData.defaultPickupTime,\n            }),\n        })\n            .then((response) => {\n                //console.log(response.text());\n                return response.json();\n                //throw new Error(response.msg);\n            })\n            .then((res) => {\n                if(res.isSuccess)\n                    newData._id = res.id\n                return res.isSuccess\n            })\n            .catch((err) => console.log(err))\n    }\n\n\n\n\n    render() {\n        const { dataSource } = this.state;\n\n        const mergedColumns = this.columns.map(col => {\n            if (!col.editable) {\n                return col;\n            }\n            return {\n                ...col,\n                onCell: record => ({\n                    record,\n                    inputType: col.dataIndex === 'name' || col.dataIndex ==='email' ? 'text' : 'number',\n                    dataIndex: col.dataIndex,\n                    title: col.title,\n                    editing: this.isEditing(record),\n                }),\n            };\n        });\n\n        //console.log(this.state.count)\n        return (\n            <div>\n                <Button disabled={this.state.editingKey !== ''} onClick={this.onAdd}\n                        type=\"primary\"\n                        style={{\n                            marginTop:16,\n                            marginBottom: 16\n                        }}>\n                    Add a New Location\n                </Button>\n                <Form ref={this.formRef} component={false}>\n                    <Table\n                        components={{\n                            body: {\n                                cell: EditableCell,\n                            },\n                        }}\n                        bordered\n                        rowKey = \"_id\"\n                        dataSource={dataSource}\n                        columns={mergedColumns}\n                        rowClassName=\"editable-row\"\n                        pagination={{\n                            onChange: this.cancel,\n                        }}\n                    />\n                </Form>\n            </div>\n\n        );\n    };\n\n}\nexport default Location;","export const API_ROOT = 'http://lmapp.us-east-2.elasticbeanstalk.com/api';\nexport const TOKEN_KEY = 'TOKEN_KEY';\n\n//export const API_ROOT = 'http://localhost:3001/api';","import React, {Component} from 'react';\nimport { Icon } from 'antd';\n\nclass TopBar extends Component {\n    render() {\n        return (\n            <header className=\"App-header\">\n                <span className=\"App-title\">Sparking Laundry Management</span>\n\n                {this.props.isLoggedIn ?\n                    <a className=\"logout\" onClick={this.props.handleLogout} >\n                        <Icon type=\"logout\"/>{' '}Logout\n                    </a> : null }\n\n            </header>\n        );\n    }\n}\n\nexport default TopBar;","\nimport React, {Component} from 'react';\nimport { Form, Icon, Input, Button, message} from 'antd';\nimport { Link } from 'react-router-dom';\nimport { API_ROOT } from '../constants';\n\nclass NormalLoginForm extends Component {\n    handleSubmit = e => {\n        e.preventDefault();\n        this.props.form.validateFields((err, values) => {\n            if (!err) {\n                console.log('Received values of form: ', values);\n                fetch(`${API_ROOT}/admin/login`, {\n                    headers:{\n                        'Accept': 'application/json',\n                        'Content-Type': 'application/json'\n                    },\n                    method: 'POST',\n                    body: JSON.stringify({\n                        username: values.username,\n                        password: values.password,\n                    }),\n                })\n                    .then((response) =>{\n                        //console.log(response)\n                        if (response.ok) {\n                            return response.json();\n                        } else {\n                            throw new Error(\"ERROR\");\n                        }\n                    })\n                    .then((data) => {\n                        //console.log(data.token);\n                        this.props.handleLoginSucceed(data.token);   // data is token\n                        message.success('Login succeed!');\n\n                        //step4: 登录成功，保存token -> 用于实现持久登录\n                    })\n                    .catch((err) => {\n                        console.log(err);\n                        message.error('Login failed.');\n                    });\n            }\n        });\n    };\n\n    render() {\n        const { getFieldDecorator } = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\n                <p className= \"login-title\">Admin Login\n                </p>\n                <Form.Item>\n                    {getFieldDecorator('username', {\n                        rules: [{ required: true, message: 'Please input your username!' }],\n                    })(\n                        <Input\n                            prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                            placeholder=\"Username\"\n                        />,\n                    )}\n                </Form.Item>\n                <Form.Item>\n                    {getFieldDecorator('password', {\n                        rules: [{ required: true, message: 'Please input your Password!' }],\n                    })(\n                        <Input\n                            prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\n                            type=\"password\"\n                            placeholder=\"Password\"\n                        />,\n                    )}\n                </Form.Item>\n                <Form.Item>\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\n                        Log in\n                    </Button>\n                </Form.Item>\n            </Form>\n\n        );\n    }\n}\n\nexport const Login = Form.create({ name: 'normal_login' })(NormalLoginForm);\n","import React, {Component} from 'react';\nimport {Menu} from \"antd\";\nimport { MailOutlined, AppstoreOutlined, SettingOutlined } from '@ant-design/icons';\nimport SubMenu from \"antd/es/menu/SubMenu\";\nimport Machine from \"./Machine\"\nimport User from \"./User\";\nimport Location from \"./Location\";\n\nclass Home extends Component {\n    state = {\n        current: 'Machine',\n    };\n\n    handleClick = e => {\n        console.log('click ', e);\n        this.setState({ current: e.key });\n    };\n\n    render() {\n        const { data, user, location } = this.props;\n        const { current } = this.state;\n        //console.log(location)\n        const componentsSwitch = (key) => {\n            switch (key) {\n                case 'Machine':\n                    return (<Machine data={data}/>);\n                case 'User':\n                    return (<User user={user}/>);\n                case 'Location':\n                    return (<Location location={location}/>);\n                default:\n                    return (<Machine data={data}/>);\n            }\n        };\n\n\n        return (\n            <div>\n                <Menu onClick={this.handleClick} selectedKeys={[current]} mode=\"horizontal\">\n                    <Menu.Item key=\"Machine\" icon={<AppstoreOutlined />}> Machine Status</Menu.Item>\n                    <Menu.Item key=\"User\" icon={<AppstoreOutlined />}> User Status</Menu.Item>\n                    <Menu.Item key=\"Location\" icon={<AppstoreOutlined />}> Location </Menu.Item>\n                </Menu>\n                {componentsSwitch(current)}\n\n            </div>\n\n        );\n    }\n}\n\nexport default Home;","import React, {Component} from 'react';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport { Login } from './Login';\nimport  Home  from './Home';\nclass Main extends Component {\n\n    getLogin = () => {\n        return this.props.isLoggedIn ?\n            <Redirect to=\"/home\"/> : <Login handleLoginSucceed={this.props.handleLoginSucceed}/>;\n    }\n    getMachine = () => {\n        //console.log(this.props.data)\n        return this.props.isLoggedIn ?\n            <Home data={this.props.data}\n            user={this.props.user}\n            location={this.props.location}/> : <Redirect to = \"/login\"/>;\n    }\n\n    render() {\n        return (\n            <div className=\"main\">\n                <Switch>\n                    <Route path=\"/login\" render={this.getLogin}/>\n                    <Route path=\"/home\" render={this.getMachine}/>\n                    <Route render={this.getLogin}/>\n                </Switch>\n                <p className=\"footnote\">Sparkling Laundry Management, Mailing Address: admin@foxmail.com, LMA 2020 Project</p>\n            </div>\n        );\n    }\n}\n\nexport default Main;\n","import React, { Component } from 'react';\nimport Machine from './components/Machine';\nimport User from './components/User';\nimport Location from './components/Location';\nimport { Menu } from 'antd';\nimport { MailOutlined, AppstoreOutlined, SettingOutlined } from '@ant-design/icons';\nimport SubMenu from \"antd/es/menu/SubMenu\";\nimport {TOKEN_KEY} from \"./constants\";\nimport TopBar from \"./components/TopBar\";\nimport Main from \"./components/Main\";\n\n\nclass App extends Component {\n  state = {\n    data: [],\n    //current: 'Machine',\n    user: [],\n    location: [],\n    isLoggedIn: Boolean(localStorage.getItem(TOKEN_KEY)),\n  };\n\n  handleLoginSucceed = (token) => {\n    console.log('token --- ', token)\n    localStorage.setItem(TOKEN_KEY, token)\n    this.setState({ isLoggedIn: true });\n  }\n\n  handleLogout = () => {\n    localStorage.removeItem(TOKEN_KEY);\n    this.setState({ isLoggedIn: false });\n  }\n\n  componentDidMount() {\n    this.getMachineFromDb();\n    this.getUserFromDb();\n    this.getLocationFromDb();\n  }\n\n  componentWillUnmount() {\n  }\n\n\n  // 我们的第一个使用后端api的get方法\n  // 从我们的数据库中获取数据\n  getMachineFromDb = () => {\n    fetch('/api/machines')\n      .then((data) => data.json())\n      .then((res) => this.setState({ data: res.machines}));\n  };\n\n  getUserFromDb = () => {\n    fetch('/api/users')\n        .then((user) => user.json())\n        .then((res) => this.setState({ user: res.users}));\n  };\n\n  getLocationFromDb = () => {\n    fetch('/api/locations')\n        .then((location) => location.json())\n        .then((res) => this.setState({ location: res.locations}));\n  };\n\n  putDataToDB = (message) => {\n    //todo\n  };\n\n  deleteFromDB = (idTodelete) => {\n    //todo\n  };\n\n  updateDB = (idToUpdate, updateToApply) => {\n    //todo\n  };\n\n\n  // handleClick = e => {\n  //   console.log('click ', e);\n  //   this.setState({ current: e.key });\n  // };\n\n  render() {\n    // const { data } = this.state;\n    // const { current } = this.state;\n    // const { user} = this.state;\n    // const { location } = this.state;\n    // const componentsSwitch = (key) => {\n    //   switch (key) {\n    //     case 'Machine':\n    //       return ( <Machine data={data}/>);\n    //     case 'User':\n    //       return (<User user={user}/>);\n    //     case 'Location':\n    //       return (<Location location={location}/>);\n    //     default:\n    //       return ( <Machine data={data}/>);\n    //   }\n    // };\n\n\n    return (\n        <div className=\"App\">\n          <TopBar handleLogout={this.handleLogout}\n                  isLoggedIn={this.state.isLoggedIn}\n          />\n          <Main  handleLoginSucceed={this.handleLoginSucceed}\n                 isLoggedIn={this.state.isLoggedIn}\n                 data={this.state.data}\n                 user={this.state.user}\n                 location={this.state.location}\n          />\n\n        </div>\n      // <>\n      //   <Menu onClick={this.handleClick} selectedKeys={[current]} mode=\"horizontal\">\n      //     <Menu.Item key=\"Machine\" icon={<AppstoreOutlined />}>\n      //       Machine Status\n      //\n      //     </Menu.Item>\n      //     <Menu.Item key=\"User\"  icon={<AppstoreOutlined />}>\n      //       User Status\n      //     </Menu.Item>\n      //     <Menu.Item key=\"Location\"  icon={<AppstoreOutlined />}>\n      //       Location\n      //     </Menu.Item>\n      //   </Menu>\n      //\n      //   {componentsSwitch(current)}\n      //\n      // </>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter>\n        <App />\n    </BrowserRouter>,\n    document.getElementById('root')\n);"],"sourceRoot":""}