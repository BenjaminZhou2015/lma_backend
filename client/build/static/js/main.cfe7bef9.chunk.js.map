{"version":3,"sources":["components/Box.js","components/List.js","components/Machine.js","components/User.js","components/Location.js","constants.js","components/TopBar.js","components/Login.js","components/Home.js","components/Main.js","App.js","index.js"],"names":["style","background","padding","Box","this","props","data","res","location","index","map","dat","item","checkres","locationID","push","length","ele","orientation","color","fontWeight","fontSize","height","justifyContent","alignItems","element","gutter","sort","a","b","machineType","sn","className","span","backgroundColor","isAvailable","width","margin","display","getRow","Component","List","availableMachines","title","Item","label","Option","Select","EditableCell","editing","dataIndex","inputType","children","record","restProps","inputNode","name","rules","required","message","handleChange","value","console","log","Machine","formRef","React","createRef","edit","machine","state","current","setFieldsValue","userID","userReservedID","scanString","setState","editingKey","_id","isEditing","cancel","save","key","validateFields","row","newData","dataSource","findIndex","splice","handleAdd","handleSave","fetch","headers","method","body","JSON","stringify","then","response","json","isSuccess","catch","err","handleDelete","count","filter","onAdd","id","columns","editable","render","_","defaultValue","onChange","text","onConfirm","onClick","marginRight","disabled","mergedColumns","col","onCell","type","marginTop","marginBottom","ref","component","components","cell","bordered","rowKey","rowClassName","pagination","User","user","Location","email","defaultRunningTime","defaultReservationExpireTime","defaultPickupTime","API_ROOT","TopBar","isLoggedIn","handleLogout","NormalLoginForm","handleSubmit","e","preventDefault","form","values","username","password","ok","Error","handleLoginSucceed","token","success","error","getFieldDecorator","onSubmit","prefix","placeholder","htmlType","Login","Form","create","Home","handleClick","selectedKeys","mode","icon","AppstoreOutlined","componentsSwitch","Main","getLogin","Redirect","to","getMachine","Switch","Route","path","App","Boolean","localStorage","getItem","setItem","removeItem","getMachineFromDb","machines","getUserFromDb","users","getLocationFromDb","locations","putDataToDB","deleteFromDB","idTodelete","updateDB","idToUpdate","updateToApply","ReactDOM","BrowserRouter","document","getElementById"],"mappings":"yUAKMA,G,OAAQ,CAAEC,WAAY,UAAWC,QAAS,UA+EjCC,E,uKAzED,IAAD,EACqBC,KAAKC,MAAvBC,EADH,EACGA,KACJC,GAFC,EACQC,SACJ,IACLC,EAAO,GAUXH,EAAKI,KAAI,SAACC,GAKF,OAbO,SAACC,GAAQ,IAAD,gBACFL,GADE,IACnB,IAAI,EAAJ,qBAAqB,CACjB,GAAGK,IADc,QAEb,OAAO,GAHI,8BAMnB,OAAO,EAGCC,CAASF,EAAIG,cACbP,EAAIQ,KAAKJ,EAAIG,YACbL,EAAMM,KAAKR,EAAIS,OAAO,IAEnB,QAoCf,OACI,oCAEI,6BACKP,EAAMC,KAAI,SAACO,GAAD,OACP,6BACI,kBAAC,IAAD,CAASC,YAAY,SAASlB,MAAO,CAAEmB,MAAO,OAAQC,WAAY,SAASC,SAAS,GAAIC,OAAO,GAAGC,eAAgB,SAAUC,WAAY,WACnI,YAAYP,GAvCxB,SAACX,EAAMmB,GAChB,OAAO,kBAAC,IAAD,CAAKC,OAAQ,CAAC,GAAI,KACpBpB,EAAKU,QAAU,EACV,oBACAV,EAAKqB,MAAK,SAACC,EAAEC,GAAH,OAAOD,EAAEE,cAAcD,EAAEC,YAAYF,EAAEG,GAAKF,EAAEE,IAAI,EAAE,EAAkB,WAAhBH,EAAEE,aAAwB,EAAE,KAAGpB,KAAI,SAACC,GAAD,OACjGA,EAAIG,YAAcP,EAAIkB,GAClB,kBAAC,IAAD,CAAKO,UAAU,aAAaC,KAAM,GAC9B,yBAAKjC,MAAK,2BACFA,GADE,IAEFkC,gBAAgBvB,EAAIwB,YAAY,UAAU,UAC1ChB,MAAM,QAENiB,MAAM,IACNd,OAAO,IACPe,OAAO,GAEPC,QAAS,OACTf,eAAgB,SAChBC,WAAY,SAEZH,SAAS,MAbjB,IAeSV,EAAImB,YAAY,IAAInB,EAAIoB,GAfjC,MAgBG,SAkBNQ,CAAOjC,EAAKW,a,GAjEvBuB,a,SC6BHC,E,uKA7BD,IACEnC,EAASF,KAAKC,MAAdC,KACJoC,EAAoB,EASxB,OARApC,EAAKI,KAAI,SAACC,GAIN,OAHGA,EAAIwB,cACHO,GAAqB,GAElB,QAKH,oCACI,kBAAC,IAAD,CAAcC,MAAM,cAChB,kBAAC,IAAaC,KAAd,CAAmBC,MAAM,kBAAkBvC,EAAKU,QAChD,kBAAC,IAAa4B,KAAd,CAAmBC,MAAM,sBAAsBH,IAHvD,S,GAfGF,a,6DCCXM,EAAWC,IAAXD,OACFE,EAAe,SAAC,GASO,IARHC,EAQE,EARFA,QACAC,EAOE,EAPFA,UACAP,EAME,EANFA,MACAQ,EAKE,EALFA,UAGAC,GAEE,EAJFC,OAIE,EAHF5C,MAGE,EAFF2C,UACGE,EACD,uFAClBC,EAA0B,WAAdJ,EAAyB,kBAAC,IAAD,MAAkB,kBAAC,IAAD,MAC7D,OACI,uBAAQG,EACHL,EACG,kBAAC,IAAKL,KAAN,CACIY,KAAMN,EACNlD,MAAO,CACHqC,OAAQ,GAEZoB,MAAO,CACH,CACIC,UAAU,EACVC,QAAQ,gBAAD,OAAkBhB,EAAlB,QAIdY,GAGLH,IA8BhB,SAASQ,EAAaC,GAClBC,QAAQC,IAAR,mBAAwBF,I,IA+WbG,E,kDAzWX,WAAY3D,GAAQ,IAAD,uBACf,cAAMA,IAFV4D,QAAUC,IAAMC,YACG,EAwInBC,KAAO,SAAAf,GAAW,IACPgB,EAAW,EAAKC,MAAhBD,QACP,EAAKJ,QAAQM,QAAQC,eAArB,aACIzC,GAAI,GACJI,YAAa,GACbL,YAAauC,EACbvD,WAAY,GACZ2D,OAAO,GACPC,eAAe,GACfC,WAAW,IACRtB,IAGP,EAAKuB,SAAS,CACVC,WAAYxB,EAAOyB,OAtJR,EA4JnBC,UAAY,SAAC1B,GACT,OAAOA,EAAOyB,MAAQ,EAAKR,MAAMO,YA7JlB,EAiKnBG,OAAS,WACL,EAAKJ,SAAS,CACVC,WAAa,MAnKF,EAuKnBI,KAvKmB,uCAuKZ,WAAMC,GAAN,qBAAAtD,EAAA,+EAEmB,EAAKqC,QAAQM,QAAQY,iBAFxC,OAEOC,EAFP,OAGOC,EAHP,YAGqB,EAAKf,MAAMgB,aACzB7E,EAAQ4E,EAAQE,WAAU,SAAA3E,GAAI,OAAKA,EAAKkE,MAAQI,OAEzC,GACHtE,EAAOyE,EAAQ5E,GACrB4E,EAAQG,OAAO/E,EAAO,EAAtB,2BAA8BG,GAASwE,IAE5B,cAARF,EACC,EAAKO,UAAUJ,EAAQ5E,IAEvB,EAAKiF,WAAWL,EAAQ5E,IAE5B,EAAKmE,SAAS,CACVU,WAAaD,EACbR,WAAY,MAGhB,EAAKD,SAAS,CACVU,WAAaD,EACbR,WAAY,KAtBrB,gDA2BCf,QAAQC,IAAI,mBAAZ,MA3BD,yDAvKY,wDAsMnB2B,WAAa,SAAA9E,GACY,EAAK0D,MAAnBgB,WACPK,MAAM,iBAAD,OAAkB/E,EAAKkE,KAAO,CAC/Bc,QAAQ,CACJ,OAAU,mBACV,eAAgB,oBAEpBC,OAAQ,MACRC,KAAMC,KAAKC,UAAU,CACjBjE,GAAInB,EAAKmB,GACTI,YAAavB,EAAKuB,YAClBL,YAAalB,EAAKkB,YAClBhB,WAAWF,EAAKE,WAChB2D,OAAO7D,EAAK6D,OACZC,eAAe9D,EAAK8D,eACpBC,WAAW/D,EAAK+D,eAGnBsB,MAAK,SAACC,GACH,OAAOA,EAASC,UAGnBF,MAAK,SAAC1F,GACH,OAAQA,EAAI6F,aAEfC,OAAM,SAACC,GAAD,OAASxC,QAAQC,IAAIuC,OA/NjB,EAkOnBC,aAAe,SAAAzB,GAAQ,IAAD,EACU,EAAKR,MAA1BkC,EADW,EACXA,MAAOlB,EADI,EACJA,WAKdK,MAAM,iBAAD,OAAkBb,GAAO,CAC1Bc,QAAQ,CACJ,OAAU,mBACV,eAAgB,oBAEpBC,OAAQ,WAEPI,MAAK,SAACC,GACH,OAAOA,EAASC,UAGnBF,MAAK,WACF,OAAO,EAAKrB,SAAS,CACjBU,WAAYA,EAAWmB,QAAO,SAAA7F,GAAI,OAAIA,EAAKkE,MAAQA,KACnD0B,MAAOA,EAAQ,OAGtBH,OAAM,SAACC,GAAD,OAASxC,QAAQC,IAAIuC,OAzPjB,EA4PnBI,MAAQ,WAAO,IAAD,EACkB,EAAKpC,MAA1BkC,EADG,EACHA,MAAOlB,EADJ,EACIA,WAERD,EAAU,CACZtD,GAAI,GACJI,YAAa,GACbL,YAAa,GACbhB,WAAY,GACZ2D,OAAO,GACPC,eAAe,GACfC,WAAW,GACXG,IAAM,aAGV,EAAKF,SAAS,CACVU,WAAW,GAAD,mBAAKA,GAAL,CAAiBD,IAC3BmB,MAAOA,EAAQ,IAEnB,EAAKpC,KAAKiB,IA9QK,EAiRnBI,UAAY,SAACJ,GACTM,MAAM,gBAAiB,CACnBC,QAAQ,CACJ,OAAU,mBACV,eAAgB,oBAEpBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACjBjE,GAAIsD,EAAQtD,GACZI,YAAakD,EAAQlD,YACrBL,YAAauD,EAAQvD,YACrBhB,WAAYuE,EAAQvE,WACpB2D,OAAOY,EAAQZ,OACfC,eAAeW,EAAQX,eACvBC,WAAWU,EAAQV,eAGtBsB,MAAK,SAACC,GAEH,OAAOA,EAASC,UAGnBF,MAAK,SAAC1F,GAGH,OAFGA,EAAI6F,YACHf,EAAQP,IAAMvE,EAAIoG,IACfpG,EAAI6F,aAEdC,OAAM,SAACC,GAAD,OAASxC,QAAQC,IAAIuC,OA1ShC,EAAKhC,MAAO,CACRgB,WAAa,EAAKjF,MAAMC,KACxBkG,MAAO,EAAKnG,MAAMC,KAAKU,OACvB6D,WAAY,GACZR,QAAQ,IAGIH,IAAMC,YATP,OAWf,EAAKyC,QAAU,CACX,CACIjE,MAAO,KACPO,UAAW,KACXgC,IAAK,KACL2B,UAAU,GAGd,CACIlE,MAAO,cACPO,UAAW,cACXgC,IAAK,cACL2B,UAAU,GAGd,CACIlE,MAAO,cACPO,UAAW,cACXgC,IAAK,cACL2B,UAAU,EACVC,OAAQ,SAACC,EAAG1D,GAsBR,IAAMwD,EAAW,EAAK9B,UAAU1B,GACd,EAAKiB,MAAhBD,QACP,OAAOwC,EACF,kBAAC,IAAD,CAAQG,aAAc3D,EAAOvB,YAAa9B,MAAO,CAACoC,MAAO,KACjD6E,SAAU,SAACpD,EAAOR,GACdA,EAAOvB,YAAa+B,IAG7B,kBAACf,EAAD,CAAQe,MAAM,UAAd,UACA,kBAACf,EAAD,CAAQe,MAAM,SAAd,UAEH,kBAAC,IAAD,CAAQmD,aAAc3D,EAAOvB,YAAa9B,MAAO,CAACoC,MAAO,KAAM6E,SAAUrD,MAOtF,CACIjB,MAAO,aACPO,UAAW,aACXgC,IAAK,aACL2B,UAAU,GAEd,CACIlE,MAAO,SACPO,UAAW,SACXgC,IAAK,SACL2B,UAAU,GAEd,CACIlE,MAAO,iBACPO,UAAW,iBACXgC,IAAK,iBACL2B,UAAU,GAEd,CACIlE,MAAO,aACPO,UAAW,aACXgC,IAAK,aACL2B,UAAU,GAEd,CACIlE,MAAO,GACPuC,IAAK,SACL4B,OAAQ,SAACI,EAAM7D,GAAP,OACJ,EAAKiB,MAAMgB,WAAWtE,QAAU,EAC5B,kBAAC,IAAD,CAAY2B,MAAM,kBAAkBwE,UAAW,kBAAM,EAAKZ,aAAalD,EAAOyB,OAC1E,sCAEJ,OAIZ,CACInC,MAAO,GACPuC,IAAK,OACL4B,OAAQ,SAACC,EAAG1D,GAER,OADiB,EAAK0B,UAAU1B,GAE5B,8BACJ,uBACI+D,QAAS,kBAAM,EAAKnC,KAAK5B,EAAOyB,MAChC9E,MAAO,CACHqH,YAAa,IAHrB,QAQA,kBAAC,IAAD,CAAY1E,MAAM,kBAAkBwE,UAAW,EAAKnC,QAClD,uCAIE,uBAAGsC,SAAoC,KAA1B,EAAKhD,MAAMO,WAAmBuC,QAAS,kBAAM,EAAKhD,KAAKf,KAApE,WA/HD,E,qDAkTT,IAAD,SACqBjD,KAAKC,MAAvBC,EADH,EACGA,KAAME,EADT,EACSA,SACN8E,EAAelF,KAAKkE,MAApBgB,WAEFiC,EAAgBnH,KAAKwG,QAAQlG,KAAI,SAAA8G,GACnC,OAAKA,EAAIX,SAGF,2BACAW,GADP,IAEIC,OAAQ,SAAApE,GAAM,MAAK,CACfA,SACAF,UAAW,OACXD,UAAWsE,EAAItE,UACfP,MAAO6E,EAAI7E,MACXM,QAAS,EAAK8B,UAAU1B,OATrBmE,KAaf,OACI,oCACI,6BACI,kBAAC,IAAD,CAAQF,SAAoC,KAA1BlH,KAAKkE,MAAMO,WAAmBuC,QAAShH,KAAKsG,MACtDgB,KAAK,UACL1H,MAAO,CACH2H,UAAU,GACVC,aAAc,KAJ1B,sBAQA,kBAAC,IAAD,CAAMC,IAAKzH,KAAK6D,QAAS6D,WAAW,GAChC,kBAAC,IAAD,CACIC,WAAY,CACRjC,KAAM,CACFkC,KAAMhF,IAGdiF,UAAQ,EACRC,OAAS,MACT5C,WAAYA,EACZsB,QAASW,EACTY,aAAa,eACbC,WAAY,CACRnB,SAAU7G,KAAK4E,YAK/B,kBAAC,EAAD,CAAM1E,KAAMA,IACZ,kBAAC,EAAD,CAAKA,KAAMA,EAAME,SAAUA,S,GAtWrBgC,aClBP6F,E,uKA5CD,IACEC,EAASlI,KAAKC,MAAdiI,KACF1B,EAAU,CACZ,CACIjE,MAAO,eACPO,UAAW,eACXgC,IAAK,OACL4B,OAAQ,SAAAI,GAAI,OAAI,2BAAIA,KAExB,CACIvE,MAAO,YACPO,UAAW,YACXgC,IAAK,aAET,CACIvC,MAAO,WACPO,UAAW,WACXgC,IAAK,YAGT,CACIvC,MAAO,QACPO,UAAW,QACXgC,IAAK,SAET,CACIvC,MAAO,aACPO,UAAW,aACXgC,IAAK,eAKb,OACI,oCAEI,kBAAC,IAAD,CAAO0B,QAASA,EAAStB,WAAYgD,S,GAxClC9F,aCEbQ,EAAe,SAAC,GASO,IARHC,EAQE,EARFA,QACAC,EAOE,EAPFA,UACAP,EAME,EANFA,MACAQ,EAKE,EALFA,UAGAC,GAEE,EAJFC,OAIE,EAHF5C,MAGE,EAFF2C,UACGE,EACD,uFAClBC,EAA0B,WAAdJ,EAAyB,kBAAC,IAAD,MAAkB,kBAAC,IAAD,MAC7D,OACI,uBAAQG,EACHL,EACG,kBAAC,IAAKL,KAAN,CACIY,KAAMN,EACNlD,MAAO,CACHqC,OAAQ,GAEZoB,MAAO,CACH,CACIC,UAAU,EACVC,QAAQ,gBAAD,OAAkBhB,EAAlB,QAIdY,GAGLH,IAuTDmF,E,kDA/SX,WAAYlI,GAAQ,IAAD,uBACf,cAAMA,IAFV4D,QAAUC,IAAMC,YACG,EAuFnBC,KAAO,SAAAf,GACH,EAAKY,QAAQM,QAAQC,eAArB,aACIhB,KAAM,GACNgF,MAAO,GACPC,mBAAoB,GACpBC,6BAA8B,GAC9BC,kBAAmB,IAChBtF,IAGP,EAAKuB,SAAS,CACVC,WAAYxB,EAAOyB,OAlGR,EAwGnBC,UAAY,SAAC1B,GACT,OAAOA,EAAOyB,MAAQ,EAAKR,MAAMO,YAzGlB,EA6GnBG,OAAS,WAAO,IACLM,EAAc,EAAKhB,MAAnBgB,WACP,EAAKV,SAAS,CACVU,WAAYA,EAAWmB,QAAO,SAAA7F,GAAI,MAvJ3B,cAuJ+BA,EAAKkE,OAC3CD,WAAa,MAjHF,EAqHnBI,KArHmB,uCAqHZ,WAAMC,GAAN,qBAAAtD,EAAA,+EAEmB,EAAKqC,QAAQM,QAAQY,iBAFxC,OAEOC,EAFP,OAGOC,EAHP,YAGqB,EAAKf,MAAMgB,aACzB7E,EAAQ4E,EAAQE,WAAU,SAAA3E,GAAI,OAAKA,EAAKkE,MAAQI,OAEzC,GACHtE,EAAOyE,EAAQ5E,GACrB4E,EAAQG,OAAO/E,EAAO,EAAtB,2BAA8BG,GAASwE,IApKpC,cAsKAF,EACC,EAAKO,UAAUJ,EAAQ5E,IAEvB,EAAKiF,WAAWL,EAAQ5E,IAE5B,EAAKmE,SAAS,CACVU,WAAaD,EACbR,WAAY,MAGhB,EAAKD,SAAS,CACVU,WAAaD,EACbR,WAAY,KAtBrB,gDA2BCf,QAAQC,IAAI,mBAAZ,MA3BD,yDArHY,wDAoJnB2B,WAAa,SAAA9E,GACY,EAAK0D,MAAnBgB,WACPK,MAAM,kBAAD,OAAmB/E,EAAKkE,KAAO,CAChCc,QAAQ,CACJ,OAAU,mBACV,eAAgB,oBAEpBC,OAAQ,MACRC,KAAMC,KAAKC,UAAU,CACjBxC,KAAM5C,EAAK4C,KACXgF,MAAO5H,EAAK4H,MACZC,mBAAoB7H,EAAK6H,mBACzBC,6BAA8B9H,EAAK8H,6BACnCC,kBAAmB/H,EAAK+H,sBAG3B1C,MAAK,SAACC,GACH,OAAOA,EAASC,UAGnBF,MAAK,SAAC1F,GACH,OAAQA,EAAI6F,aAEfC,OAAM,SAACC,GAAD,OAASxC,QAAQC,IAAIuC,OA3KjB,EA8KnBC,aAAe,SAAAzB,GAAQ,IAAD,EACU,EAAKR,MAA1BkC,EADW,EACXA,MAAOlB,EADI,EACJA,WAKdK,MAAM,kBAAD,OAAmBb,GAAO,CAC3Bc,QAAQ,CACJ,OAAU,mBACV,eAAgB,oBAEpBC,OAAQ,WAEPI,MAAK,SAACC,GACH,OAAOA,EAASC,UAGnBF,MAAK,WACF,OAAO,EAAKrB,SAAS,CACjBU,WAAYA,EAAWmB,QAAO,SAAA7F,GAAI,OAAIA,EAAKkE,MAAQA,KACnD0B,MAAOA,EAAQ,OAGtBH,OAAM,SAACC,GAAD,OAASxC,QAAQC,IAAIuC,OArMjB,EAwMnBI,MAAQ,WAAO,IAAD,EACkB,EAAKpC,MAA1BkC,EADG,EACHA,MAAOlB,EADJ,EACIA,WAERD,EAAU,CACZ7B,KAAK,GACLgF,MAAM,GACNC,mBAAoB,GACpBC,6BAA8B,GAC9BC,kBAAmB,GACnB7D,IAxPO,aA2PX,EAAKF,SAAS,CACVU,WAAW,GAAD,mBAAKA,GAAL,CAAiBD,IAC3BmB,MAAOA,EAAQ,IAEnB,EAAKpC,KAAKiB,IAxNK,EA2NnBI,UAAY,SAACJ,GACTM,MAAM,iBAAkB,CACpBC,QAAQ,CACJ,OAAU,mBACV,eAAgB,oBAEpBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACjBxC,KAAM6B,EAAQ7B,KACdgF,MAAOnD,EAAQmD,MACfC,mBAAoBpD,EAAQoD,mBAC5BC,6BAA8BrD,EAAQqD,6BACtCC,kBAAmBtD,EAAQsD,sBAG9B1C,MAAK,SAACC,GAEH,OAAOA,EAASC,UAGnBF,MAAK,SAAC1F,GAGH,OAFGA,EAAI6F,YACHf,EAAQP,IAAMvE,EAAIoG,IACfpG,EAAI6F,aAEdC,OAAM,SAACC,GAAD,OAASxC,QAAQC,IAAIuC,OAlPhC,EAAKhC,MAAO,CACRgB,WAAa,EAAKjF,MAAMG,SACxBgG,MAAO,EAAKnG,MAAMG,SAASQ,OAC3B6D,WAAY,IAEAX,IAAMC,YAPP,OASf,EAAKyC,QAAU,CACX,CACIjE,MAAO,OACPO,UAAW,OACXgC,IAAK,OACL2B,UAAU,GAGd,CACIlE,MAAO,QACPO,UAAW,QACXgC,IAAK,QACL2B,UAAU,GAGd,CACIlE,MAAO,qBACPO,UAAW,qBACXgC,IAAK,qBACL2B,UAAU,GAId,CACIlE,MAAO,+BACPO,UAAW,+BACXgC,IAAK,+BACL2B,UAAU,GAEd,CACIlE,MAAO,oBACPO,UAAW,oBACXgC,IAAK,oBACL2B,UAAU,GAGd,CACIlE,MAAO,GACPuC,IAAK,SACL4B,OAAQ,SAACI,EAAM7D,GAAP,OACJ,EAAKiB,MAAMgB,WAAWtE,QAAU,EAC5B,kBAAC,IAAD,CAAY2B,MAAM,kBAAkBwE,UAAW,kBAAM,EAAKZ,aAAalD,EAAOyB,OAC1E,uBAAGwC,SA1FZ,cA0FsB,EAAKhD,MAAMO,YAAxB,WAEJ,OAIZ,CACIlC,MAAO,GACPuC,IAAK,OACL4B,OAAQ,SAACC,EAAG1D,GAER,OADiB,EAAK0B,UAAU1B,GAE5B,8BACJ,uBACI+D,QAAS,kBAAM,EAAKnC,KAAK5B,EAAOyB,MAChC9E,MAAO,CACHqH,YAAa,IAHrB,QASA,uBAAGD,QAAS,kBAAM,EAAKpC,WAAvB,WAII,uBAAGsC,SAAoC,KAA1B,EAAKhD,MAAMO,WAAmBuC,QAAS,kBAAM,EAAKhD,KAAKf,KAApE,WA7ED,E,qDA0PT,IAAD,OACGiC,EAAelF,KAAKkE,MAApBgB,WAEFiC,EAAgBnH,KAAKwG,QAAQlG,KAAI,SAAA8G,GACnC,OAAKA,EAAIX,SAGF,2BACAW,GADP,IAEIC,OAAQ,SAAApE,GAAM,MAAK,CACfA,SACAF,UAA6B,SAAlBqE,EAAItE,WAAyC,UAAjBsE,EAAItE,UAAuB,OAAS,SAC3EA,UAAWsE,EAAItE,UACfP,MAAO6E,EAAI7E,MACXM,QAAS,EAAK8B,UAAU1B,OATrBmE,KAef,OACI,6BACI,kBAAC,IAAD,CAAQF,SAAoC,KAA1BlH,KAAKkE,MAAMO,WAAmBuC,QAAShH,KAAKsG,MACtDgB,KAAK,UACL1H,MAAO,CACH2H,UAAU,GACVC,aAAc,KAJ1B,sBAQA,kBAAC,IAAD,CAAMC,IAAKzH,KAAK6D,QAAS6D,WAAW,GAChC,kBAAC,IAAD,CACIC,WAAY,CACRjC,KAAM,CACFkC,KAAMhF,IAGdiF,UAAQ,EACRC,OAAS,MACT5C,WAAYA,EACZsB,QAASW,EACTY,aAAa,eACbC,WAAY,CACRnB,SAAU7G,KAAK4E,gB,GAvSpBxC,aC1CVoG,EAAW,kD,OCiBTC,E,uKAZP,OACI,4BAAQ7G,UAAU,cACd,0BAAMA,UAAU,aAAhB,gCACC5B,KAAKC,MAAMyI,WACR,uBAAG9G,UAAU,SAASoF,QAAShH,KAAKC,MAAM0I,cACtC,kBAAC,IAAD,CAAMrB,KAAK,WAAW,IAD1B,UAEO,U,GARNlF,a,6CCGfwG,E,4MACFC,aAAe,SAAAC,GACXA,EAAEC,iBACF,EAAK9I,MAAM+I,KAAKjE,gBAAe,SAACmB,EAAK+C,GAC5B/C,IACDxC,QAAQC,IAAI,4BAA6BsF,GACzC1D,MAAM,GAAD,OAAIiD,EAAJ,gBAA4B,CAC7BhD,QAAQ,CACJ,OAAU,mBACV,eAAgB,oBAEpBC,OAAQ,OACRC,KAAMC,KAAKC,UAAU,CACjBsD,SAAUD,EAAOC,SACjBC,SAAUF,EAAOE,aAGpBtD,MAAK,SAACC,GAEH,GAAIA,EAASsD,GACT,OAAOtD,EAASC,OAEhB,MAAM,IAAIsD,MAAM,YAGvBxD,MAAK,SAAC3F,GAEH,EAAKD,MAAMqJ,mBAAmBpJ,EAAKqJ,OACnChG,IAAQiG,QAAQ,qBAInBvD,OAAM,SAACC,GACJxC,QAAQC,IAAIuC,GACZ3C,IAAQkG,MAAM,yB,uDAMxB,IACEC,EAAsB1J,KAAKC,MAAM+I,KAAjCU,kBACR,OACI,kBAAC,IAAD,CAAMC,SAAU3J,KAAK6I,aAAcjH,UAAU,cACzC,uBAAGA,UAAW,eAAd,eAEA,kBAAC,IAAKY,KAAN,KACKkH,EAAkB,WAAY,CAC3BrG,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCADtCmG,CAGG,kBAAC,IAAD,CACIE,OAAQ,kBAAC,IAAD,CAAMtC,KAAK,OAAO1H,MAAO,CAAEmB,MAAO,qBAC1C8I,YAAY,eAIxB,kBAAC,IAAKrH,KAAN,KACKkH,EAAkB,WAAY,CAC3BrG,MAAO,CAAC,CAAEC,UAAU,EAAMC,QAAS,iCADtCmG,CAGG,kBAAC,IAAD,CACIE,OAAQ,kBAAC,IAAD,CAAMtC,KAAK,OAAO1H,MAAO,CAAEmB,MAAO,qBAC1CuG,KAAK,WACLuC,YAAY,eAIxB,kBAAC,IAAKrH,KAAN,KACI,kBAAC,IAAD,CAAQ8E,KAAK,UAAUwC,SAAS,SAASlI,UAAU,qBAAnD,gB,GApEUQ,aA8EjB2H,EAAQC,IAAKC,OAAO,CAAE7G,KAAM,gBAApB4G,CAAsCpB,G,kBCjC5CsB,E,4MA1CXhG,MAAQ,CACJC,QAAS,W,EAGbgG,YAAc,SAAArB,GACVpF,QAAQC,IAAI,SAAUmF,GACtB,EAAKtE,SAAS,CAAEL,QAAS2E,EAAEhE,O,uDAGrB,IAAD,EAC4B9E,KAAKC,MAA9BC,EADH,EACGA,KAAMgI,EADT,EACSA,KAAM9H,EADf,EACeA,SACZ+D,EAAYnE,KAAKkE,MAAjBC,QAgBR,OACI,6BACI,kBAAC,IAAD,CAAM6C,QAAShH,KAAKmK,YAAaC,aAAc,CAACjG,GAAUkG,KAAK,cAC3D,kBAAC,IAAK7H,KAAN,CAAWsC,IAAI,UAAUwF,KAAM,kBAACC,EAAA,EAAD,OAA/B,mBACA,kBAAC,IAAK/H,KAAN,CAAWsC,IAAI,OAAOwF,KAAM,kBAACC,EAAA,EAAD,OAA5B,gBACA,kBAAC,IAAK/H,KAAN,CAAWsC,IAAI,WAAWwF,KAAM,kBAACC,EAAA,EAAD,OAAhC,eAnBa,SAACzF,GACtB,OAAQA,GACJ,IAAK,UACD,OAAQ,kBAAC,EAAD,CAAS5E,KAAMA,EAAME,SAAUA,IAC3C,IAAK,OACD,OAAQ,kBAAC,EAAD,CAAM8H,KAAMA,IACxB,IAAK,WACD,OAAQ,kBAAC,EAAD,CAAU9H,SAAUA,IAChC,QACI,OAAQ,kBAAC,EAAD,CAASF,KAAMA,KAY1BsK,CAAiBrG,Q,GAnCf/B,aCwBJqI,E,4MA1BXC,SAAW,WACP,OAAO,EAAKzK,MAAMyI,WACd,kBAACiC,EAAA,EAAD,CAAUC,GAAG,UAAY,kBAACb,EAAD,CAAOT,mBAAoB,EAAKrJ,MAAMqJ,sB,EAEvEuB,WAAa,WAET,OAAO,EAAK5K,MAAMyI,WACd,kBAAC,EAAD,CAAMxI,KAAM,EAAKD,MAAMC,KACvBgI,KAAM,EAAKjI,MAAMiI,KACjB9H,SAAU,EAAKH,MAAMG,WAAc,kBAACuK,EAAA,EAAD,CAAUC,GAAK,Y,uDAItD,OACI,yBAAKhJ,UAAU,QACX,kBAACkJ,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAOC,KAAK,SAAStE,OAAQ1G,KAAK0K,WAClC,kBAACK,EAAA,EAAD,CAAOC,KAAK,QAAQtE,OAAQ1G,KAAK6K,aACjC,kBAACE,EAAA,EAAD,CAAOrE,OAAQ1G,KAAK0K,YAExB,uBAAG9I,UAAU,YAAb,2F,GAtBGQ,aCiIJ6I,E,4MAxHb/G,MAAQ,CACNhE,KAAM,GAENgI,KAAM,GACN9H,SAAU,GACVsI,WAAYwC,QAAQC,aAAaC,QLjBZ,e,EKoBvB9B,mBAAqB,SAACC,GACpB7F,QAAQC,IAAI,aAAc4F,GAC1B4B,aAAaE,QLtBQ,YKsBW9B,GAChC,EAAK/E,SAAS,CAAEkE,YAAY,K,EAG9BC,aAAe,WACbwC,aAAaG,WL3BQ,aK4BrB,EAAK9G,SAAS,CAAEkE,YAAY,K,EAe9B6C,iBAAmB,WACjBhG,MAAM,iBACHM,MAAK,SAAC3F,GAAD,OAAUA,EAAK6F,UACpBF,MAAK,SAAC1F,GAAD,OAAS,EAAKqE,SAAS,CAAEtE,KAAMC,EAAIqL,e,EAG7CC,cAAgB,WACdlG,MAAM,cACDM,MAAK,SAACqC,GAAD,OAAUA,EAAKnC,UACpBF,MAAK,SAAC1F,GAAD,OAAS,EAAKqE,SAAS,CAAE0D,KAAM/H,EAAIuL,Y,EAG/CC,kBAAoB,WAClBpG,MAAM,kBACDM,MAAK,SAACzF,GAAD,OAAcA,EAAS2F,UAC5BF,MAAK,SAAC1F,GAAD,OAAS,EAAKqE,SAAS,CAAEpE,SAAUD,EAAIyL,gB,EAGnDC,YAAc,SAACtI,K,EAIfuI,aAAe,SAACC,K,EAIhBC,SAAW,SAACC,EAAYC,K,kEArCtBlM,KAAKuL,mBACLvL,KAAKyL,gBACLzL,KAAK2L,sB,+EAgEL,OACI,yBAAK/J,UAAU,OACb,kBAAC,EAAD,CAAQ+G,aAAc3I,KAAK2I,aACnBD,WAAY1I,KAAKkE,MAAMwE,aAE/B,kBAAC,EAAD,CAAOY,mBAAoBtJ,KAAKsJ,mBACzBZ,WAAY1I,KAAKkE,MAAMwE,WACvBxI,KAAMF,KAAKkE,MAAMhE,KACjBgI,KAAMlI,KAAKkE,MAAMgE,KACjB9H,SAAUJ,KAAKkE,MAAM9D,gB,GAhGpBgC,a,UCNlB+J,IAASzF,OACL,kBAAC0F,GAAA,EAAD,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,W","file":"static/js/main.cfe7bef9.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Row, Col, Divider } from 'antd';\r\nimport '../index.css';\r\nimport 'antd/dist/antd.css';\r\n\r\nconst style = { background: '#0092ff', padding: '8px 0' };\r\n\r\n\r\n\r\nclass Box extends Component{\r\n\r\n    render() {\r\n        const { data,location } = this.props;\r\n        let res =[];\r\n        let index =[];\r\n        let locationName =[];\r\n        var checkres = (item)=>{\r\n            for(const ele of res){\r\n                if(item === ele){\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n        data.map((dat) => {\r\n                if(!checkres(dat.locationID)) {\r\n                    res.push(dat.locationID);\r\n                    index.push(res.length-1);\r\n                }\r\n                return null;\r\n            }\r\n        )\r\n        //res.map((dat))\r\n        const getRow=(data, element)=>{\r\n            return <Row gutter={[16, 24]}>\r\n                {data.length <= 0\r\n                    ? 'NO DB ENTRIES YET'\r\n                    : data.sort((a,b)=>a.machineType===b.machineType?a.sn < b.sn?-1:1:a.machineType===\"washer\"?-1:1).map((dat) => (\r\n                        dat.locationID == res[element]?\r\n                            <Col className=\"gutter-row\" span={6}>\r\n                                <div style={\r\n                                    {...style,\r\n                                        backgroundColor:dat.isAvailable?'#98FB98':'#87CEFA',\r\n                                        color:'black',\r\n\r\n                                        width:300,\r\n                                        height:100,\r\n                                        margin:10,\r\n\r\n                                        display: 'flex',\r\n                                        justifyContent: 'center',\r\n                                        alignItems: 'center',\r\n\r\n                                        fontSize:20\r\n\r\n                                    }}> {dat.machineType+\" \"+dat.sn} </div>\r\n                            </Col>:null\r\n\r\n                    ))}\r\n\r\n\r\n            </Row>\r\n        }\r\n\r\n\r\n        return (\r\n            <>\r\n\r\n                <div>\r\n                    {index.map((ele)=>(\r\n                        <div>\r\n                            <Divider orientation=\"middle\" style={{ color: '#333', fontWeight: 'normal',fontSize:30, height:50,justifyContent: 'center', alignItems: 'center'}}>\r\n                                {\"location:\"+ele}\r\n                            </Divider>\r\n                            {getRow(data,ele)}\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n            </>\r\n        );\r\n\r\n    }\r\n\r\n}\r\nexport default Box;","import React, { Component } from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { Descriptions} from 'antd';\r\n\r\n\r\n\r\nclass List extends Component{\r\n\r\n\r\n    render() {\r\n        const { data } = this.props;\r\n        let availableMachines = 0;\r\n        data.map((dat) => {\r\n            if(dat.isAvailable) {\r\n                availableMachines += 1;\r\n            }\r\n            return null;\r\n            }\r\n        )\r\n\r\n        return (\r\n                <>\r\n                    <Descriptions title=\"Statistics\">\r\n                        <Descriptions.Item label=\"Washer & Dryer\">{data.length}</Descriptions.Item>\r\n                        <Descriptions.Item label=\"Available Machines\">{availableMachines}</Descriptions.Item>\r\n                    </Descriptions>,\r\n\r\n\r\n\r\n\r\n                </>\r\n\r\n            )\r\n\r\n\r\n    }\r\n\r\n}\r\nexport default List;","import React, {useState,Component} from 'react';\r\nimport Box from './Box';\r\nimport List from './List';\r\nimport {Input, InputNumber, Menu,Select} from \"antd\";\r\nimport { Table,  Button, Popconfirm} from 'antd';\r\nimport {Form} from 'antd4'\r\n\r\nconst { Option } = Select;\r\nconst EditableCell = ({\r\n                          editing,\r\n                          dataIndex,\r\n                          title,\r\n                          inputType,\r\n                          record,\r\n                          index,\r\n                          children,\r\n                          ...restProps\r\n                      }) => {\r\n    const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\r\n    return (\r\n        <td {...restProps}>\r\n            {editing ? (\r\n                <Form.Item\r\n                    name={dataIndex}\r\n                    style={{\r\n                        margin: 0,\r\n                    }}\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: `Please Input ${title}!`,\r\n                        },\r\n                    ]}\r\n                >\r\n                    {inputNode}\r\n                </Form.Item>\r\n            ) : (\r\n                children\r\n            )}\r\n        </td>\r\n    );\r\n};\r\n/*sn: {\r\n    type: String,\r\n        required: true\r\n},\r\nisAvailable: Boolean,\r\n    isReserved: {\r\n    type: Boolean,\r\ndefault: false\r\n},\r\n//for machine which is not picked up by user who use it\r\n//related function:updateNonPickupMachineStatus\r\nisPickedUp: {\r\n    type: Boolean,\r\ndefault: true\r\n},\r\nmachineType: String, // washer, dryer\r\n    startTime: {\r\n    type: Date,\r\ndefault: Date.UTC(1970, 0, 1)\r\n},\r\nuserID: String,\r\n    userReservedID: String,\r\n    locationID: String,\r\n    scanString: String  //base64(id)*/\r\n\r\nfunction handleChange(value) {\r\n    console.log(`selected ${value}`);\r\n}\r\n\r\nclass Machine extends Component {\r\n\r\n    formRef = React.createRef();\r\n    constructor(props) {\r\n        super(props);\r\n        this.state= {\r\n            dataSource : this.props.data,\r\n            count: this.props.data.length,\r\n            editingKey: '',\r\n            machine:''\r\n\r\n        };\r\n        const formRef = React.createRef();\r\n\r\n        this.columns = [\r\n            {\r\n                title: 'SN',\r\n                dataIndex: 'sn',\r\n                key: 'sn',\r\n                editable: true,\r\n\r\n            },\r\n            {\r\n                title: 'IsAvailable',\r\n                dataIndex: 'isAvailable',\r\n                key: 'isAvailable',\r\n                editable: true,\r\n\r\n            },\r\n            {\r\n                title: 'MachineType',\r\n                dataIndex: 'machineType',\r\n                key: 'machineType',\r\n                editable: true,\r\n                render: (_, record) => {\r\n\r\n                    /*const editable = this.isEditing(record);\r\n                    return editable ? (\r\n                        <span>\r\n                        <a\r\n                            onClick={() => this.save(record._id)}\r\n                            style={{\r\n                                marginRight: 8,\r\n                            }}\r\n                        >\r\n                          Save\r\n                        </a>\r\n                        <Popconfirm title=\"Sure to cancel?\" onConfirm={this.cancel}>\r\n                          <a>Cancel</a>\r\n                        </Popconfirm>\r\n                        </span>\r\n                    ) : (\r\n                        <a disabled={this.state.editingKey !== ''} onClick={() => this.edit(record)}>\r\n                            Edit\r\n                        </a>\r\n                    );*/\r\n                    const editable = this.isEditing(record);\r\n                    const {machine} = this.state;\r\n                    return editable ?\r\n                        (<Select defaultValue={record.machineType} style={{width: 120}}\r\n                                 onChange={(value, record)=>{\r\n                                     record.machineType =value;\r\n\r\n                                 }}>\r\n                            <Option value=\"washer\" >washer</Option>\r\n                            <Option value=\"dryer\" >dryer</Option>\r\n                        </Select>):\r\n                        (<Select defaultValue={record.machineType} style={{width: 120}} onChange={handleChange}>\r\n\r\n                        </Select>)\r\n\r\n                },\r\n\r\n            },\r\n            {\r\n                title: 'LocationID',\r\n                dataIndex: 'locationID',\r\n                key: 'locationID',\r\n                editable: true,\r\n            },\r\n            {\r\n                title: 'UserID',\r\n                dataIndex: 'userID',\r\n                key: 'userID',\r\n                editable: true,\r\n            },\r\n            {\r\n                title: 'UserReservedID',\r\n                dataIndex: 'userReservedID',\r\n                key: 'userReservedID',\r\n                editable: true,\r\n            },\r\n            {\r\n                title: 'ScanString',\r\n                dataIndex: 'scanString',\r\n                key: 'scanString',\r\n                editable: true,\r\n            },\r\n            {\r\n                title: \"\",\r\n                key: \"delete\",\r\n                render: (text, record) => (\r\n                    this.state.dataSource.length >= 1 ? (\r\n                        <Popconfirm title=\"Sure to delete?\" onConfirm={() => this.handleDelete(record._id)}>\r\n                            <a>Delete</a>\r\n                        </Popconfirm>\r\n                    ) : null\r\n\r\n                ),\r\n            },\r\n            {\r\n                title: \"\",\r\n                key: \"edit\",\r\n                render: (_, record) => {\r\n                    const editable = this.isEditing(record);\r\n                    return editable ? (\r\n                        <span>\r\n                    <a\r\n                        onClick={() => this.save(record._id)}\r\n                        style={{\r\n                            marginRight: 8,\r\n                        }}\r\n                    >\r\n                      Save\r\n                    </a>\r\n                    <Popconfirm title=\"Sure to cancel?\" onConfirm={this.cancel}>\r\n                      <a>Cancel</a>\r\n                    </Popconfirm>\r\n                    </span>\r\n                    ) : (\r\n                        <a disabled={this.state.editingKey !== ''} onClick={() => this.edit(record)}>\r\n                            Edit\r\n                        </a>\r\n                    );\r\n                },\r\n            },\r\n\r\n        ];\r\n    }\r\n    edit = record => {\r\n        const {machine} = this.state;\r\n        this.formRef.current.setFieldsValue({\r\n            sn: '',\r\n            isAvailable: '',\r\n            machineType: machine,\r\n            locationID: '',\r\n            userID:'',\r\n            userReservedID:'',\r\n            scanString:'',\r\n            ...record,\r\n        });\r\n\r\n        this.setState({\r\n            editingKey: record._id\r\n        });\r\n\r\n        //record._id = id; //Cannot be recovered\r\n    };\r\n\r\n    isEditing = (record) => {\r\n        return record._id === this.state.editingKey;\r\n    };\r\n\r\n\r\n    cancel = () => {\r\n        this.setState({\r\n            editingKey : ''\r\n        });\r\n    };\r\n\r\n    save = async key => {\r\n        try {\r\n            const row = await this.formRef.current.validateFields();\r\n            const newData = [...this.state.dataSource];\r\n            const index = newData.findIndex(item =>  item._id === key);\r\n\r\n            if (index > -1) {\r\n                const item = newData[index];\r\n                newData.splice(index, 1, { ...item, ...row });\r\n\r\n                if(key === \"VirtualID\"){\r\n                    this.handleAdd(newData[index]);\r\n                } else{\r\n                    this.handleSave(newData[index]);\r\n                }\r\n                this.setState({\r\n                    dataSource : newData,\r\n                    editingKey: ''\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    dataSource : newData,\r\n                    editingKey: ''\r\n                });\r\n\r\n            }\r\n        } catch (errInfo) {\r\n            console.log('Validate Failed:', errInfo);\r\n        }\r\n    };\r\n\r\n    handleSave = item => {\r\n        const {dataSource} = this.state;\r\n        fetch(`/api/machines/${item._id}`, {\r\n            headers:{\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'PUT',\r\n            body: JSON.stringify({\r\n                sn: item.sn,\r\n                isAvailable: item.isAvailable,\r\n                machineType: item.machineType,\r\n                locationID:item.locationID,\r\n                userID:item.userID,\r\n                userReservedID:item.userReservedID,\r\n                scanString:item.scanString,\r\n            }),\r\n        })\r\n            .then((response) => {\r\n                return response.json();\r\n                //throw new Error(response.msg);\r\n            })\r\n            .then((res) => {\r\n                return (res.isSuccess)\r\n            })\r\n            .catch((err) => console.log(err))\r\n    };\r\n\r\n    handleDelete = _id => {\r\n        const {count, dataSource} = this.state;\r\n        // this.setState({\r\n        //     dataSource: dataSource.filter(item => item._id !== _id),\r\n        // });\r\n\r\n        fetch(`/api/machines/${_id}`, {\r\n            headers:{\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'DELETE',\r\n        })\r\n            .then((response) => {\r\n                return response.json();\r\n                //throw new Error(response.msg);\r\n            })\r\n            .then(() => {\r\n                return this.setState({\r\n                    dataSource: dataSource.filter(item => item._id !== _id),\r\n                    count: count - 1,\r\n                });\r\n            })\r\n            .catch((err) => console.log(err))\r\n    };\r\n\r\n    onAdd = () => {\r\n        const {count, dataSource} = this.state;\r\n\r\n        const newData = {\r\n            sn: '',\r\n            isAvailable: '',\r\n            machineType: '',\r\n            locationID: '',\r\n            userID:'',\r\n            userReservedID:'',\r\n            scanString:'',\r\n            _id : \"VirtualID\"\r\n        };\r\n\r\n        this.setState({\r\n            dataSource:[...dataSource, newData],\r\n            count: count + 1,\r\n        });\r\n        this.edit(newData)\r\n    };\r\n\r\n    handleAdd = (newData) => {\r\n        fetch(\"/api/machines\", {\r\n            headers:{\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                sn: newData.sn,\r\n                isAvailable: newData.isAvailable,\r\n                machineType: newData.machineType,\r\n                locationID: newData.locationID,\r\n                userID:newData.userID,\r\n                userReservedID:newData.userReservedID,\r\n                scanString:newData.scanString,\r\n            }),\r\n        })\r\n            .then((response) => {\r\n                //console.log(response.text());\r\n                return response.json();\r\n                //throw new Error(response.msg);\r\n            })\r\n            .then((res) => {\r\n                if(res.isSuccess)\r\n                    newData._id = res.id\r\n                return res.isSuccess\r\n            })\r\n            .catch((err) => console.log(err))\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const { data ,location} = this.props;\r\n        const { dataSource } = this.state;\r\n\r\n        const mergedColumns = this.columns.map(col => {\r\n            if (!col.editable) {\r\n                return col;\r\n            }\r\n            return {\r\n                ...col,\r\n                onCell: record => ({\r\n                    record,\r\n                    inputType: 'text',\r\n                    dataIndex: col.dataIndex,\r\n                    title: col.title,\r\n                    editing: this.isEditing(record),\r\n                }),\r\n            };\r\n        });\r\n        return (\r\n            <>\r\n                <div>\r\n                    <Button disabled={this.state.editingKey !== ''} onClick={this.onAdd}\r\n                            type=\"primary\"\r\n                            style={{\r\n                                marginTop:16,\r\n                                marginBottom: 16\r\n                            }}>\r\n                        Add a New Location\r\n                    </Button>\r\n                    <Form ref={this.formRef} component={false}>\r\n                        <Table\r\n                            components={{\r\n                                body: {\r\n                                    cell: EditableCell,\r\n                                },\r\n                            }}\r\n                            bordered\r\n                            rowKey = \"_id\"\r\n                            dataSource={dataSource}\r\n                            columns={mergedColumns}\r\n                            rowClassName=\"editable-row\"\r\n                            pagination={{\r\n                                onChange: this.cancel,\r\n                            }}\r\n                        />\r\n                    </Form>\r\n                </div>\r\n                <List data={data}/>\r\n                <Box data={data} location={location}/>\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Machine;","import React, {Component} from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { Table, Tag, Space } from 'antd';\r\n\r\n\r\nclass User extends Component {\r\n\r\n\r\n\r\n    render() {\r\n        const { user } = this.props;\r\n        const columns = [\r\n            {\r\n                title: 'RegisterDate',\r\n                dataIndex: 'registerDate',\r\n                key: 'date',\r\n                render: text => <a>{text}</a>,\r\n            },\r\n            {\r\n                title: 'FirstName',\r\n                dataIndex: 'firstName',\r\n                key: 'firstName',\r\n            },\r\n            {\r\n                title: 'LastName',\r\n                dataIndex: 'lastName',\r\n                key: 'lastName',\r\n            },\r\n\r\n            {\r\n                title: 'Email',\r\n                dataIndex: 'email',\r\n                key: 'email',\r\n            },\r\n            {\r\n                title: 'LocationID',\r\n                dataIndex: 'locationID',\r\n                key: 'locationID',\r\n            },\r\n\r\n        ];\r\n\r\n        return (\r\n            <>\r\n\r\n                <Table columns={columns} dataSource={user} />\r\n\r\n\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\nexport default User;","import React, {useState, Component} from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { Table,  Button, Popconfirm, Input, InputNumber} from 'antd';\r\nimport {Form} from 'antd4'\r\n\r\nconst Virtual_ID = \"VirtualID\"\r\n\r\nconst EditableCell = ({\r\n                          editing,\r\n                          dataIndex,\r\n                          title,\r\n                          inputType,\r\n                          record,\r\n                          index,\r\n                          children,\r\n                          ...restProps\r\n                      }) => {\r\n    const inputNode = inputType === 'number' ? <InputNumber /> : <Input />;\r\n    return (\r\n        <td {...restProps}>\r\n            {editing ? (\r\n                <Form.Item\r\n                    name={dataIndex}\r\n                    style={{\r\n                        margin: 0,\r\n                    }}\r\n                    rules={[\r\n                        {\r\n                            required: true,\r\n                            message: `Please Input ${title}!`,\r\n                        },\r\n                    ]}\r\n                >\r\n                    {inputNode}\r\n                </Form.Item>\r\n            ) : (\r\n                children\r\n            )}\r\n        </td>\r\n    );\r\n};\r\n\r\nclass Location extends Component {\r\n    formRef = React.createRef();\r\n    constructor(props) {\r\n        super(props);\r\n        this.state= {\r\n            dataSource : this.props.location,\r\n            count: this.props.location.length,\r\n            editingKey: ''\r\n        };\r\n        const formRef = React.createRef();\r\n\r\n        this.columns = [\r\n            {\r\n                title: 'Name',\r\n                dataIndex: 'name',\r\n                key: 'name',\r\n                editable: true,\r\n\r\n            },\r\n            {\r\n                title: 'Email',\r\n                dataIndex: 'email',\r\n                key: 'email',\r\n                editable: true,\r\n\r\n            },\r\n            {\r\n                title: 'DefaultRunningTime',\r\n                dataIndex: 'defaultRunningTime',\r\n                key: 'defaultRunningTime',\r\n                editable: true,\r\n\r\n\r\n            },\r\n            {\r\n                title: 'DefaultReservationExpireTime',\r\n                dataIndex: 'defaultReservationExpireTime',\r\n                key: 'defaultReservationExpireTime',\r\n                editable: true,\r\n            },\r\n            {\r\n                title: 'DefaultPickupTime',\r\n                dataIndex: 'defaultPickupTime',\r\n                key: 'defaultPickupTime',\r\n                editable: true,\r\n\r\n            },\r\n            {\r\n                title: \"\",\r\n                key: \"delete\",\r\n                render: (text, record) => (\r\n                    this.state.dataSource.length >= 1 ? (\r\n                        <Popconfirm title=\"Sure to delete?\" onConfirm={() => this.handleDelete(record._id)}>\r\n                            <a disabled={this.state.editingKey === Virtual_ID} >Delete</a>\r\n                        </Popconfirm>\r\n                    ) : null\r\n\r\n                ),\r\n            },\r\n            {\r\n                title: \"\",\r\n                key: \"edit\",\r\n                render: (_, record) => {\r\n                    const editable = this.isEditing(record);\r\n                    return editable ? (\r\n                        <span>\r\n                    <a\r\n                        onClick={() => this.save(record._id)}\r\n                        style={{\r\n                            marginRight: 8,\r\n                        }}\r\n                    >\r\n                      Save\r\n                    </a>\r\n\r\n                    <a onClick={() => this.cancel()}>Cancel</a>\r\n\r\n                    </span>\r\n                    ) : (\r\n                        <a disabled={this.state.editingKey !== ''} onClick={() => this.edit(record)}>\r\n                            Edit\r\n                        </a>\r\n                    );\r\n                },\r\n            },\r\n\r\n        ];\r\n    }\r\n\r\n    edit = record => {\r\n        this.formRef.current.setFieldsValue({\r\n            name: '',\r\n            email: '',\r\n            defaultRunningTime: '',\r\n            defaultReservationExpireTime: '',\r\n            defaultPickupTime: '',\r\n            ...record,\r\n        });\r\n\r\n        this.setState({\r\n            editingKey: record._id\r\n        });\r\n\r\n        //record._id = id; //Cannot be recovered\r\n    };\r\n\r\n    isEditing = (record) => {\r\n        return record._id === this.state.editingKey;\r\n    };\r\n\r\n\r\n    cancel = () => {\r\n        const {dataSource} = this.state;\r\n        this.setState({\r\n            dataSource: dataSource.filter(item => item._id !== Virtual_ID),\r\n            editingKey : ''\r\n        });\r\n    };\r\n\r\n    save = async key => {\r\n        try {\r\n            const row = await this.formRef.current.validateFields();\r\n            const newData = [...this.state.dataSource];\r\n            const index = newData.findIndex(item =>  item._id === key);\r\n\r\n            if (index > -1) {\r\n                const item = newData[index];\r\n                newData.splice(index, 1, { ...item, ...row });\r\n\r\n                if(key === Virtual_ID){\r\n                    this.handleAdd(newData[index]);\r\n                } else{\r\n                    this.handleSave(newData[index]);\r\n                }\r\n                this.setState({\r\n                    dataSource : newData,\r\n                    editingKey: ''\r\n                });\r\n            } else {\r\n                this.setState({\r\n                    dataSource : newData,\r\n                    editingKey: ''\r\n                });\r\n\r\n            }\r\n        } catch (errInfo) {\r\n            console.log('Validate Failed:', errInfo);\r\n        }\r\n    };\r\n\r\n    handleSave = item => {\r\n        const {dataSource} = this.state;\r\n        fetch(`/api/locations/${item._id}`, {\r\n            headers:{\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'PUT',\r\n            body: JSON.stringify({\r\n                name: item.name,\r\n                email: item.email,\r\n                defaultRunningTime: item.defaultRunningTime,\r\n                defaultReservationExpireTime: item.defaultReservationExpireTime,\r\n                defaultPickupTime: item.defaultPickupTime,\r\n            }),\r\n        })\r\n            .then((response) => {\r\n                return response.json();\r\n                //throw new Error(response.msg);\r\n            })\r\n            .then((res) => {\r\n                return (res.isSuccess)\r\n            })\r\n            .catch((err) => console.log(err))\r\n    };\r\n\r\n    handleDelete = _id => {\r\n        const {count, dataSource} = this.state;\r\n        // this.setState({\r\n        //     dataSource: dataSource.filter(item => item._id !== _id),\r\n        // });\r\n\r\n        fetch(`/api/locations/${_id}`, {\r\n            headers:{\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'DELETE',\r\n        })\r\n            .then((response) => {\r\n                return response.json();\r\n                //throw new Error(response.msg);\r\n            })\r\n            .then(() => {\r\n                return this.setState({\r\n                    dataSource: dataSource.filter(item => item._id !== _id),\r\n                    count: count - 1,\r\n                });\r\n            })\r\n            .catch((err) => console.log(err))\r\n    };\r\n\r\n    onAdd = () => {\r\n        const {count, dataSource} = this.state;\r\n\r\n        const newData = {\r\n            name:\"\",\r\n            email:\"\",\r\n            defaultRunningTime: \"\",\r\n            defaultReservationExpireTime: \"\",\r\n            defaultPickupTime: \"\",\r\n            _id : Virtual_ID\r\n        };\r\n\r\n        this.setState({\r\n            dataSource:[...dataSource, newData],\r\n            count: count + 1,\r\n        });\r\n        this.edit(newData)\r\n    };\r\n\r\n    handleAdd = (newData) => {\r\n        fetch(\"/api/locations\", {\r\n            headers:{\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            method: 'POST',\r\n            body: JSON.stringify({\r\n                name: newData.name,\r\n                email: newData.email,\r\n                defaultRunningTime: newData.defaultRunningTime,\r\n                defaultReservationExpireTime: newData.defaultReservationExpireTime,\r\n                defaultPickupTime: newData.defaultPickupTime,\r\n            }),\r\n        })\r\n            .then((response) => {\r\n                //console.log(response.text());\r\n                return response.json();\r\n                //throw new Error(response.msg);\r\n            })\r\n            .then((res) => {\r\n                if(res.isSuccess)\r\n                    newData._id = res.id\r\n                return res.isSuccess\r\n            })\r\n            .catch((err) => console.log(err))\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const { dataSource } = this.state;\r\n\r\n        const mergedColumns = this.columns.map(col => {\r\n            if (!col.editable) {\r\n                return col;\r\n            }\r\n            return {\r\n                ...col,\r\n                onCell: record => ({\r\n                    record,\r\n                    inputType: col.dataIndex === 'name' || col.dataIndex ==='email' ? 'text' : 'number',\r\n                    dataIndex: col.dataIndex,\r\n                    title: col.title,\r\n                    editing: this.isEditing(record),\r\n                }),\r\n            };\r\n        });\r\n\r\n        //console.log(this.state.count)\r\n        return (\r\n            <div>\r\n                <Button disabled={this.state.editingKey !== ''} onClick={this.onAdd}\r\n                        type=\"primary\"\r\n                        style={{\r\n                            marginTop:16,\r\n                            marginBottom: 16\r\n                        }}>\r\n                    Add a New Location\r\n                </Button>\r\n                <Form ref={this.formRef} component={false}>\r\n                    <Table\r\n                        components={{\r\n                            body: {\r\n                                cell: EditableCell,\r\n                            },\r\n                        }}\r\n                        bordered\r\n                        rowKey = \"_id\"\r\n                        dataSource={dataSource}\r\n                        columns={mergedColumns}\r\n                        rowClassName=\"editable-row\"\r\n                        pagination={{\r\n                            onChange: this.cancel,\r\n                        }}\r\n                    />\r\n                </Form>\r\n            </div>\r\n\r\n        );\r\n    };\r\n\r\n}\r\nexport default Location;","export const API_ROOT = 'http://lmapp.us-east-2.elasticbeanstalk.com/api';\r\nexport const TOKEN_KEY = 'TOKEN_KEY';\r\n\r\n//export const API_ROOT = 'http://localhost:3001/api';","import React, {Component} from 'react';\r\nimport { Icon } from 'antd';\r\n\r\nclass TopBar extends Component {\r\n    render() {\r\n        return (\r\n            <header className=\"App-header\">\r\n                <span className=\"App-title\">Sparkling Laundry Management</span>\r\n                {this.props.isLoggedIn ?\r\n                    <a className=\"logout\" onClick={this.props.handleLogout} >\r\n                        <Icon type=\"logout\"/>{' '}Logout\r\n                    </a> : null }\r\n            </header>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TopBar;","\r\nimport React, {Component} from 'react';\r\nimport { Form, Icon, Input, Button, message} from 'antd';\r\nimport { Link } from 'react-router-dom';\r\nimport { API_ROOT } from '../constants';\r\n\r\nclass NormalLoginForm extends Component {\r\n    handleSubmit = e => {\r\n        e.preventDefault();\r\n        this.props.form.validateFields((err, values) => {\r\n            if (!err) {\r\n                console.log('Received values of form: ', values);\r\n                fetch(`${API_ROOT}/admin/login`, {\r\n                    headers:{\r\n                        'Accept': 'application/json',\r\n                        'Content-Type': 'application/json'\r\n                    },\r\n                    method: 'POST',\r\n                    body: JSON.stringify({\r\n                        username: values.username,\r\n                        password: values.password,\r\n                    }),\r\n                })\r\n                    .then((response) =>{\r\n                        //console.log(response)\r\n                        if (response.ok) {\r\n                            return response.json();\r\n                        } else {\r\n                            throw new Error(\"ERROR\");\r\n                        }\r\n                    })\r\n                    .then((data) => {\r\n                        //console.log(data.token);\r\n                        this.props.handleLoginSucceed(data.token);   // data is token\r\n                        message.success('Login succeed!');\r\n\r\n                        //step4: 登录成功，保存token -> 用于实现持久登录\r\n                    })\r\n                    .catch((err) => {\r\n                        console.log(err);\r\n                        message.error('Login failed.');\r\n                    });\r\n            }\r\n        });\r\n    };\r\n\r\n    render() {\r\n        const { getFieldDecorator } = this.props.form;\r\n        return (\r\n            <Form onSubmit={this.handleSubmit} className=\"login-form\">\r\n                <p className= \"login-title\">Admin Login\r\n                </p>\r\n                <Form.Item>\r\n                    {getFieldDecorator('username', {\r\n                        rules: [{ required: true, message: 'Please input your username!' }],\r\n                    })(\r\n                        <Input\r\n                            prefix={<Icon type=\"user\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                            placeholder=\"Username\"\r\n                        />,\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    {getFieldDecorator('password', {\r\n                        rules: [{ required: true, message: 'Please input your Password!' }],\r\n                    })(\r\n                        <Input\r\n                            prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />}\r\n                            type=\"password\"\r\n                            placeholder=\"Password\"\r\n                        />,\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                        Log in\r\n                    </Button>\r\n                </Form.Item>\r\n            </Form>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport const Login = Form.create({ name: 'normal_login' })(NormalLoginForm);\r\n","import React, {Component} from 'react';\r\nimport {Menu} from \"antd\";\r\nimport { MailOutlined, AppstoreOutlined, SettingOutlined } from '@ant-design/icons';\r\nimport SubMenu from \"antd/es/menu/SubMenu\";\r\nimport Machine from \"./Machine\"\r\nimport User from \"./User\";\r\nimport Location from \"./Location\";\r\n\r\nclass Home extends Component {\r\n    state = {\r\n        current: 'Machine',\r\n    };\r\n\r\n    handleClick = e => {\r\n        console.log('click ', e);\r\n        this.setState({ current: e.key });\r\n    };\r\n\r\n    render() {\r\n        const { data, user, location } = this.props;\r\n        const { current } = this.state;\r\n        //console.log(location)\r\n        const componentsSwitch = (key) => {\r\n            switch (key) {\r\n                case 'Machine':\r\n                    return (<Machine data={data} location={location}/>);\r\n                case 'User':\r\n                    return (<User user={user}/>);\r\n                case 'Location':\r\n                    return (<Location location={location}/>);\r\n                default:\r\n                    return (<Machine data={data}/>);\r\n            }\r\n        };\r\n\r\n\r\n        return (\r\n            <div>\r\n                <Menu onClick={this.handleClick} selectedKeys={[current]} mode=\"horizontal\">\r\n                    <Menu.Item key=\"Machine\" icon={<AppstoreOutlined />}> Machine Status</Menu.Item>\r\n                    <Menu.Item key=\"User\" icon={<AppstoreOutlined />}> User Status</Menu.Item>\r\n                    <Menu.Item key=\"Location\" icon={<AppstoreOutlined />}> Location </Menu.Item>\r\n                </Menu>\r\n                {componentsSwitch(current)}\r\n\r\n            </div>\r\n\r\n        );\r\n    }\r\n}\r\n\r\nexport default Home;","import React, {Component} from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\nimport { Login } from './Login';\r\nimport  Home  from './Home';\r\nclass Main extends Component {\r\n\r\n    getLogin = () => {\r\n        return this.props.isLoggedIn ?\r\n            <Redirect to=\"/home\"/> : <Login handleLoginSucceed={this.props.handleLoginSucceed}/>;\r\n    }\r\n    getMachine = () => {\r\n        //console.log(this.props.data)\r\n        return this.props.isLoggedIn ?\r\n            <Home data={this.props.data}\r\n            user={this.props.user}\r\n            location={this.props.location}/> : <Redirect to = \"/login\"/>;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"main\">\r\n                <Switch>\r\n                    <Route path=\"/login\" render={this.getLogin}/>\r\n                    <Route path=\"/home\" render={this.getMachine}/>\r\n                    <Route render={this.getLogin}/>\r\n                </Switch>\r\n                <p className=\"footnote\">Sparkling Laundry Management, Mailing Address: admin@foxmail.com, LMA 2020 Project</p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Main;\r\n","import React, { Component } from 'react';\r\nimport Machine from './components/Machine';\r\nimport User from './components/User';\r\nimport Location from './components/Location';\r\nimport { Menu } from 'antd';\r\nimport { MailOutlined, AppstoreOutlined, SettingOutlined } from '@ant-design/icons';\r\nimport SubMenu from \"antd/es/menu/SubMenu\";\r\nimport {TOKEN_KEY} from \"./constants\";\r\nimport TopBar from \"./components/TopBar\";\r\nimport Main from \"./components/Main\";\r\n\r\n\r\nclass App extends Component {\r\n  state = {\r\n    data: [],\r\n    //current: 'Machine',\r\n    user: [],\r\n    location: [],\r\n    isLoggedIn: Boolean(localStorage.getItem(TOKEN_KEY)),\r\n  };\r\n\r\n  handleLoginSucceed = (token) => {\r\n    console.log('token --- ', token)\r\n    localStorage.setItem(TOKEN_KEY, token)\r\n    this.setState({ isLoggedIn: true });\r\n  }\r\n\r\n  handleLogout = () => {\r\n    localStorage.removeItem(TOKEN_KEY);\r\n    this.setState({ isLoggedIn: false });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getMachineFromDb();\r\n    this.getUserFromDb();\r\n    this.getLocationFromDb();\r\n  }\r\n\r\n  componentWillUnmount() {\r\n  }\r\n\r\n\r\n  // 我们的第一个使用后端api的get方法\r\n  // 从我们的数据库中获取数据\r\n  getMachineFromDb = () => {\r\n    fetch('/api/machines')\r\n      .then((data) => data.json())\r\n      .then((res) => this.setState({ data: res.machines}));\r\n  };\r\n\r\n  getUserFromDb = () => {\r\n    fetch('/api/users')\r\n        .then((user) => user.json())\r\n        .then((res) => this.setState({ user: res.users}));\r\n  };\r\n\r\n  getLocationFromDb = () => {\r\n    fetch('/api/locations')\r\n        .then((location) => location.json())\r\n        .then((res) => this.setState({ location: res.locations}));\r\n  };\r\n\r\n  putDataToDB = (message) => {\r\n    //todo\r\n  };\r\n\r\n  deleteFromDB = (idTodelete) => {\r\n    //todo\r\n  };\r\n\r\n  updateDB = (idToUpdate, updateToApply) => {\r\n    //todo\r\n  };\r\n\r\n\r\n  // handleClick = e => {\r\n  //   console.log('click ', e);\r\n  //   this.setState({ current: e.key });\r\n  // };\r\n\r\n  render() {\r\n    // const { data } = this.state;\r\n    // const { current } = this.state;\r\n    // const { user} = this.state;\r\n    // const { location } = this.state;\r\n    // const componentsSwitch = (key) => {\r\n    //   switch (key) {\r\n    //     case 'Machine':\r\n    //       return ( <Machine data={data}/>);\r\n    //     case 'User':\r\n    //       return (<User user={user}/>);\r\n    //     case 'Location':\r\n    //       return (<Location location={location}/>);\r\n    //     default:\r\n    //       return ( <Machine data={data}/>);\r\n    //   }\r\n    // };\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n          <TopBar handleLogout={this.handleLogout}\r\n                  isLoggedIn={this.state.isLoggedIn}\r\n          />\r\n          <Main  handleLoginSucceed={this.handleLoginSucceed}\r\n                 isLoggedIn={this.state.isLoggedIn}\r\n                 data={this.state.data}\r\n                 user={this.state.user}\r\n                 location={this.state.location}\r\n          />\r\n\r\n        </div>\r\n      // <>\r\n      //   <Menu onClick={this.handleClick} selectedKeys={[current]} mode=\"horizontal\">\r\n      //     <Menu.Item key=\"Machine\" icon={<AppstoreOutlined />}>\r\n      //       Machine Status\r\n      //\r\n      //     </Menu.Item>\r\n      //     <Menu.Item key=\"User\"  icon={<AppstoreOutlined />}>\r\n      //       User Status\r\n      //     </Menu.Item>\r\n      //     <Menu.Item key=\"Location\"  icon={<AppstoreOutlined />}>\r\n      //       Location\r\n      //     </Menu.Item>\r\n      //   </Menu>\r\n      //\r\n      //   {componentsSwitch(current)}\r\n      //\r\n      // </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { BrowserRouter } from \"react-router-dom\";\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>,\r\n    document.getElementById('root')\r\n);"],"sourceRoot":""}